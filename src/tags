!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLEGRO_H	allegro.h	2;"	d
ANIMATION_END_REACHED	components/component.h	/^	ANIMATION_END_REACHED,$/;"	m	class:ent_msg_t	access:private
ARMOR	components/component.h	/^	ARMOR,$/;"	m	class:drop_t	access:private
ARMOR_PICKUP	collision/collision_space.h	/^	ARMOR_PICKUP,$/;"	m	class:collision_class	access:private
BEZIER_H	geometry/bezier.h	2;"	d
CANCEL_MOVE	components/component.h	/^	CANCEL_MOVE,	$/;"	m	class:ent_msg_t	access:private
CIRCLE_H	collision/circle.h	2;"	d
CMP_APPR_BITMAP_H	components/appearance/cmp_appr_bitmap.h	2;"	d
CMP_APPR_PIXEL_H	components/appearance/cmp_appr_pixel.h	2;"	d
CMP_APPR_SIMPLE_ANIM_H	components/appearance/cmp_appr_simple_anim.h	2;"	d
CMP_BOUNDED_LIFE_H	components/bounds/cmp_bounded_life.h	2;"	d
CMP_BOUNDED_MOVEMENT_H	components/bounds/cmp_bounded_movement.h	2;"	d
CMP_BULLET_EMITTER_H	components/emitters/cmp_bullet_emitter.h	2;"	d
CMP_COLLIDABLE_H	components/cmp_collidable.h	2;"	d
CMP_DIE_END_ANIM_H	components/cmp_die_end_anim.h	2;"	d
CMP_DROP_WHEN_DIE_H	components/cmp_drop_when_die.h	2;"	d
CMP_EXPLODE_WHEN_DIE_H	components/cmp_explode_when_die.h	2;"	d
CMP_HEALTH_ETC_H	components/wellness/cmp_health_etc.h	2;"	d
CMP_HEALTH_PICKER_H	components/wellness/cmp_health_picker.h	2;"	d
CMP_MOVE_CONST_SPEED_H	components/position/cmp_move_const_speed.h	2;"	d
CMP_MOVE_PATH_H	components/position/cmp_move_path.h	2;"	d
CMP_MOVE_PLAYER_H	components/position/cmp_move_player.h	2;"	d
CMP_ORIENTATION_H	components/position/cmp_orientation.h	2;"	d
CMP_PAINMAP_H	components/wellness/cmp_painmap.h	2;"	d
CMP_PLAYER_HEALTH_H	components/wellness/cmp_player_health.h	2;"	d
CMP_ROTATE_CONST_SPEED_H	components/position/cmp_rotate_const_speed.h	2;"	d
CMP_SCORE_WHEN_DIE_H	components/cmp_score_when_die.h	2;"	d
CMP_SHOOT_PLAYER_H	components/cmp_shoot_player.h	2;"	d
CMP_SMOKE_WHEN_HURT_H	components/wellness/cmp_smoke_when_hurt.h	2;"	d
CMP_TIME_TO_LIVE_H	components/cmp_time_to_live.h	2;"	d
COLLISION	components/component.h	/^	COLLISION,$/;"	m	class:ent_msg_t	access:private
COLLISIONS_H	collision/collisions.h	2;"	d
COLLISION_SPACE_H	collision/collision_space.h	2;"	d
COMPONENT_H	components/component.h	2;"	d
CONFIG_H	config.h	2;"	d
DEBRIS1	resources/resman.h	/^	DEBRIS1,$/;"	m	class:res_id	access:private
DEBRIS2	resources/resman.h	/^	DEBRIS2,$/;"	m	class:res_id	access:private
DEBRIS3	resources/resman.h	/^	DEBRIS3,$/;"	m	class:res_id	access:private
DEBRIS4	resources/resman.h	/^	DEBRIS4,$/;"	m	class:res_id	access:private
DEBRIS5	resources/resman.h	/^	DEBRIS5,$/;"	m	class:res_id	access:private
DEBUG_H	debug.h	2;"	d
DEBUG_MSG	debug.h	10;"	d
ENEMY_BULLET	collision/collision_space.h	/^	ENEMY_BULLET,$/;"	m	class:collision_class	access:private
ENEMY_EYE	resources/resman.h	/^	ENEMY_EYE,$/;"	m	class:res_id	access:private
ENEMY_SHIP	collision/collision_space.h	/^	ENEMY_SHIP,$/;"	m	class:collision_class	access:private
ENTITY_BUILDER_H	entities/entity_builder.h	2;"	d
ENTITY_FACTORY_H	entities/entity_factory.h	2;"	d
ENTITY_H	entities/entity.h	2;"	d
EXCEPTIONS_H	exceptions.h	2;"	d
EXPLOSION	resources/resman.h	/^	EXPLOSION,$/;"	m	class:res_id	access:private
EXPLOSION_1	resources/resman.h	/^	EXPLOSION_1,$/;"	m	class:res_id	access:private
EYE_BULLET	resources/resman.h	/^	EYE_BULLET,$/;"	m	class:res_id	access:private
FONT	resources/resman.h	/^	FONT,$/;"	m	class:res_id	access:private
FRAME_DEF_H	components/appearance/frame_def.h	2;"	d
GLOBAL_STATE_H	game_model.h	2;"	d
HEALTH	components/component.h	/^	HEALTH,$/;"	m	class:drop_t	access:private
HEALTH	resources/resman.h	/^	HEALTH,$/;"	m	class:res_id	access:private
HEALTH_ETC	components/component.h	/^	HEALTH_ETC,$/;"	m	class:ent_msg_t	access:private
HEALTH_PICKUP	collision/collision_space.h	/^	HEALTH_PICKUP,$/;"	m	class:collision_class	access:private
MISC_H	geometry/misc.h	2;"	d
MOVE	components/component.h	/^	MOVE,$/;"	m	class:ent_msg_t	access:private
ORIENTATION	components/component.h	/^	ORIENTATION,	$/;"	m	class:ent_msg_t	access:private
PAIN	components/component.h	/^	PAIN,$/;"	m	class:ent_msg_t	access:private
PATH_END_REACHED	components/component.h	/^	PATH_END_REACHED,$/;"	m	class:ent_msg_t	access:private
PICKUP	components/component.h	/^	PICKUP,$/;"	m	class:ent_msg_t	access:private
PLAYER_BULLET	collision/collision_space.h	/^	PLAYER_BULLET,$/;"	m	class:collision_class	access:private
PLAYER_BULLET	resources/resman.h	/^	PLAYER_BULLET,$/;"	m	class:res_id	access:private
PLAYER_SHIP	collision/collision_space.h	/^	PLAYER_SHIP,$/;"	m	class:collision_class	access:private
PLAYER_SHIP	resources/resman.h	/^	PLAYER_SHIP,$/;"	m	class:res_id	access:private
Q_rsqrt	geometry/misc.h	/^static float Q_rsqrt( float number )$/;"	f	signature:( float number )
RANDOM_CLOCK_H	random_clock.h	2;"	d
REMOVE_ENTITY	game_model.h	/^	REMOVE_ENTITY,$/;"	m	class:game_msg_t	access:private
RESMAN_H	resources/resman.h	2;"	d
ROTATE	components/component.h	/^	ROTATE,$/;"	m	class:ent_msg_t	access:private
SHAPE_H	collision/shape.h	2;"	d
SMOKE	resources/resman.h	/^	SMOKE,$/;"	m	class:res_id	access:private
SMOKE_1	resources/resman.h	/^	SMOKE_1,$/;"	m	class:res_id	access:private
SPAWN_BULLET	game_model.h	/^	SPAWN_BULLET,$/;"	m	class:game_msg_t	access:private
SPAWN_EXPL	game_model.h	/^	SPAWN_EXPL,$/;"	m	class:game_msg_t	access:private
SPAWN_HEALTH	game_model.h	/^	SPAWN_HEALTH,$/;"	m	class:game_msg_t	access:private
SPAWN_SMOKE	game_model.h	/^	SPAWN_SMOKE,$/;"	m	class:game_msg_t	access:private
STATE_H	state.h	2;"	d
TYPES_H	geometry/types.h	2;"	d
_a	components/appearance/cmp_appr_pixel.h	/^	double _a;$/;"	m	class:cmp_appr_pixel	access:private
_accumulator	components/cmp_shoot_player.h	/^	double _accumulator;$/;"	m	class:cmp_shoot_player	access:private
_allegro	main.cpp	/^	allegro _allegro;$/;"	m	class:application	file:	access:private
_armor	components/wellness/cmp_health_etc.h	/^	double _armor;$/;"	m	class:cmp_health_etc	access:private
_armor_boost	components/wellness/cmp_health_picker.h	/^	double _armor_boost;$/;"	m	class:cmp_health_picker	access:private
_b	components/appearance/cmp_appr_pixel.h	/^	double _b;$/;"	m	class:cmp_appr_pixel	access:private
_bitmap	components/appearance/cmp_appr_bitmap.h	/^	ALLEGRO_BITMAP* _bitmap;$/;"	m	class:cmp_appr_bitmap	access:private
_bitmap	components/appearance/cmp_appr_simple_anim.h	/^	ALLEGRO_BITMAP* _bitmap;$/;"	m	class:cmp_appr_simple_anim	access:private
_bitmap_id	components/emitters/cmp_bullet_emitter.h	/^	res_id _bitmap_id;$/;"	m	class:cmp_bullet_emitter	access:private
_bitmaps	resources/resman.h	/^	map<res_id, p_bmp> _bitmaps;$/;"	m	class:resman	access:private
_callback	random_clock.h	/^	function<void()> _callback;$/;"	m	class:random_clock	access:private
_class	components/cmp_collidable.h	/^	collision_class _class;$/;"	m	class:cmp_collidable	access:private
_coll_space	game_state.cpp	/^	collision_space _coll_space;$/;"	m	class:game_state	file:	access:private
_collision_entries	collision/collision_space.h	/^	vector<coll_entry> _collision_entries;$/;"	m	class:collision_space	access:private
_collisions	components/wellness/cmp_health_picker.h	/^	vector<collision_class> _collisions;$/;"	m	class:cmp_health_picker	access:private
_collisions	components/wellness/cmp_painmap.h	/^	vector<collision_class> _collisions;$/;"	m	class:cmp_painmap	access:private
_components	entities/entity.h	/^	vector<shared_ptr<component>> _components;$/;"	m	class:entity	access:private
_components	entities/entity_builder.h	/^	vector<shared_ptr<component>> _components;$/;"	m	class:entity_builder	access:private
_config	entities/entity_factory.h	/^	const config& _config;$/;"	m	class:entity_factory	access:private
_config	game_state.cpp	/^	const config& _config;$/;"	m	class:game_state	file:	access:private
_config	main.cpp	/^	config _config;$/;"	m	class:application	file:	access:private
_counter	components/emitters/cmp_bullet_emitter.h	/^	double _counter;$/;"	m	class:cmp_bullet_emitter	access:private
_counter	components/wellness/cmp_smoke_when_hurt.h	/^	double _counter;$/;"	m	class:cmp_smoke_when_hurt	access:private
_cs	components/cmp_collidable.h	/^	collision_space& _cs;$/;"	m	class:cmp_collidable	access:private
_current_def	components/appearance/cmp_appr_simple_anim.h	/^	uint32_t _current_def;$/;"	m	class:cmp_appr_simple_anim	access:private
_dead	components/cmp_drop_when_die.h	/^	bool _dead;$/;"	m	class:cmp_drop_when_die	access:private
_dead	components/cmp_explode_when_die.h	/^	bool _dead;$/;"	m	class:cmp_explode_when_die	access:private
_dead	components/cmp_score_when_die.h	/^	bool _dead;$/;"	m	class:cmp_score_when_die	access:private
_die	components/cmp_die_end_anim.h	/^	bool _die;$/;"	m	class:cmp_die_end_anim	access:private
_display	allegro.h	/^	ALLEGRO_DISPLAY* _display;$/;"	m	class:allegro	access:private
_distribution	random_clock.h	/^	DISTRIBUTION _distribution;$/;"	m	class:random_clock	access:private
_done	components/appearance/cmp_appr_simple_anim.h	/^	double _done;$/;"	m	class:cmp_appr_simple_anim	access:private
_done	components/position/cmp_move_path.h	/^	bool _done;$/;"	m	class:cmp_move_path	access:private
_done	game_state.cpp	/^	bool _done;$/;"	m	class:game_state	file:	access:private
_dpy	resources/resman.h	/^	ALLEGRO_DISPLAY* _dpy;$/;"	m	class:resman	access:private
_drop_type	components/cmp_drop_when_die.h	/^	drop_t _drop_type;$/;"	m	class:cmp_drop_when_die	access:private
_dt_max	components/emitters/cmp_bullet_emitter.h	/^	double _dt_max;$/;"	m	class:cmp_bullet_emitter	access:private
_dt_min	components/emitters/cmp_bullet_emitter.h	/^	double _dt_min;$/;"	m	class:cmp_bullet_emitter	access:private
_engine	components/cmp_shoot_player.h	/^	default_random_engine _engine;$/;"	m	class:cmp_shoot_player	access:private
_engine	components/emitters/cmp_bullet_emitter.h	/^	default_random_engine _engine;$/;"	m	class:cmp_bullet_emitter	access:private
_engine	components/wellness/cmp_smoke_when_hurt.h	/^	default_random_engine _engine;$/;"	m	class:cmp_smoke_when_hurt	access:private
_engine	entities/entity_builder.h	/^	default_random_engine _engine;$/;"	m	class:entity_builder	access:private
_engine	entities/entity_factory.h	/^	default_random_engine _engine;$/;"	m	class:entity_factory	access:private
_engine	game_state.cpp	/^	default_random_engine _engine;$/;"	m	class:game_state	file:	access:private
_engine	random_clock.h	/^	default_random_engine _engine;$/;"	m	class:random_clock	access:private
_entities	game_state.cpp	/^	vector<entity> _entities;$/;"	m	class:game_state	file:	access:private
_entity_factory	game_state.cpp	/^	entity_factory _entity_factory;$/;"	m	class:game_state	file:	access:private
_event_queue	allegro.h	/^	ALLEGRO_EVENT_QUEUE* _event_queue;$/;"	m	class:allegro	access:private
_eye_spawn_clk	game_state.cpp	/^	random_clock<uniform_real_distribution<double>> _eye_spawn_clk;$/;"	m	class:game_state	file:	access:private
_font	game_state.cpp	/^	ALLEGRO_FONT* _font;$/;"	m	class:game_state	file:	access:private
_fonts	resources/resman.h	/^	map<res_id, unique_ptr<ALLEGRO_FONT, font_deleter>> _fonts;$/;"	m	class:resman	access:private
_fps	main.cpp	/^	double _fps;$/;"	m	class:application	file:	access:private
_frame_defs	components/appearance/cmp_appr_simple_anim.h	/^	array<frame_def, 128> _frame_defs;$/;"	m	class:cmp_appr_simple_anim	access:private
_frame_images	components/appearance/cmp_appr_simple_anim.h	/^	array<ALLEGRO_BITMAP*, 128> _frame_images;$/;"	m	class:cmp_appr_simple_anim	access:private
_frame_width	components/appearance/cmp_appr_simple_anim.h	/^	uint32_t _frame_width;$/;"	m	class:cmp_appr_simple_anim	access:private
_g	components/appearance/cmp_appr_pixel.h	/^	double _g;$/;"	m	class:cmp_appr_pixel	access:private
_game_model	game_state.cpp	/^	game_model _game_model;$/;"	m	class:game_state	file:	access:private
_health	components/wellness/cmp_health_etc.h	/^	double _health;$/;"	m	class:cmp_health_etc	access:private
_health_boost	components/wellness/cmp_health_picker.h	/^	double _health_boost;$/;"	m	class:cmp_health_picker	access:private
_id	collision/shape.h	/^	uint32_t _id;$/;"	m	class:shape	access:private
_id	entities/entity.h	/^	uint32_t _id;$/;"	m	class:entity	access:private
_is_enemy	components/emitters/cmp_bullet_emitter.h	/^	bool _is_enemy;$/;"	m	class:cmp_bullet_emitter	access:private
_keymap	game_state.cpp	/^	map<int, bool> _keymap;$/;"	m	class:game_state	file:	access:private
_lase_shape_id	entities/entity_factory.h	/^	uint32_t _lase_shape_id;$/;"	m	class:entity_factory	access:private
_last_armor	components/wellness/cmp_player_health.h	/^	double _last_armor;$/;"	m	class:cmp_player_health	access:private
_last_dx	components/cmp_drop_when_die.h	/^	double _last_dx;$/;"	m	class:cmp_drop_when_die	access:private
_last_dx	components/cmp_explode_when_die.h	/^	double _last_dx;$/;"	m	class:cmp_explode_when_die	access:private
_last_dy	components/cmp_drop_when_die.h	/^	double _last_dy;$/;"	m	class:cmp_drop_when_die	access:private
_last_dy	components/cmp_explode_when_die.h	/^	double _last_dy;$/;"	m	class:cmp_explode_when_die	access:private
_last_health	components/wellness/cmp_player_health.h	/^	double _last_health;$/;"	m	class:cmp_player_health	access:private
_last_health	components/wellness/cmp_smoke_when_hurt.h	/^	double _last_health;$/;"	m	class:cmp_smoke_when_hurt	access:private
_last_id	entities/entity_factory.h	/^	uint32_t _last_id;$/;"	m	class:entity_factory	access:private
_last_theta	components/appearance/cmp_appr_bitmap.h	/^	double _last_theta;$/;"	m	class:cmp_appr_bitmap	access:private
_last_theta	components/appearance/cmp_appr_simple_anim.h	/^	double _last_theta;$/;"	m	class:cmp_appr_simple_anim	access:private
_last_x	components/appearance/cmp_appr_bitmap.h	/^	double _last_x;$/;"	m	class:cmp_appr_bitmap	access:private
_last_x	components/appearance/cmp_appr_pixel.h	/^	double _last_x;$/;"	m	class:cmp_appr_pixel	access:private
_last_x	components/appearance/cmp_appr_simple_anim.h	/^	double _last_x;$/;"	m	class:cmp_appr_simple_anim	access:private
_last_x	components/bounds/cmp_bounded_life.h	/^	double _last_x;$/;"	m	class:cmp_bounded_life	access:private
_last_x	components/cmp_drop_when_die.h	/^	double _last_x;$/;"	m	class:cmp_drop_when_die	access:private
_last_x	components/cmp_explode_when_die.h	/^	double _last_x;$/;"	m	class:cmp_explode_when_die	access:private
_last_x	components/cmp_shoot_player.h	/^	double _last_x;$/;"	m	class:cmp_shoot_player	access:private
_last_x	components/emitters/cmp_bullet_emitter.h	/^	double _last_x;$/;"	m	class:cmp_bullet_emitter	access:private
_last_x	components/position/cmp_move_path.h	/^	double _last_x;$/;"	m	class:cmp_move_path	access:private
_last_x	components/position/cmp_move_player.h	/^	double _last_x;$/;"	m	class:cmp_move_player	access:private
_last_x	components/wellness/cmp_smoke_when_hurt.h	/^	double _last_x;$/;"	m	class:cmp_smoke_when_hurt	access:private
_last_y	components/appearance/cmp_appr_bitmap.h	/^	double _last_y;$/;"	m	class:cmp_appr_bitmap	access:private
_last_y	components/appearance/cmp_appr_pixel.h	/^	double _last_y;$/;"	m	class:cmp_appr_pixel	access:private
_last_y	components/appearance/cmp_appr_simple_anim.h	/^	double _last_y;$/;"	m	class:cmp_appr_simple_anim	access:private
_last_y	components/bounds/cmp_bounded_life.h	/^	double _last_y;$/;"	m	class:cmp_bounded_life	access:private
_last_y	components/cmp_drop_when_die.h	/^	double _last_y;$/;"	m	class:cmp_drop_when_die	access:private
_last_y	components/cmp_explode_when_die.h	/^	double _last_y;$/;"	m	class:cmp_explode_when_die	access:private
_last_y	components/cmp_shoot_player.h	/^	double _last_y;$/;"	m	class:cmp_shoot_player	access:private
_last_y	components/emitters/cmp_bullet_emitter.h	/^	double _last_y;$/;"	m	class:cmp_bullet_emitter	access:private
_last_y	components/position/cmp_move_path.h	/^	double _last_y;$/;"	m	class:cmp_move_path	access:private
_last_y	components/position/cmp_move_player.h	/^	double _last_y;$/;"	m	class:cmp_move_player	access:private
_last_y	components/wellness/cmp_smoke_when_hurt.h	/^	double _last_y;$/;"	m	class:cmp_smoke_when_hurt	access:private
_max_armor	components/wellness/cmp_health_etc.h	/^	double _max_armor;$/;"	m	class:cmp_health_etc	access:private
_max_health	components/wellness/cmp_health_etc.h	/^	double _max_health;$/;"	m	class:cmp_health_etc	access:private
_max_health	components/wellness/cmp_smoke_when_hurt.h	/^	double _max_health;$/;"	m	class:cmp_smoke_when_hurt	access:private
_max_x_dev	components/cmp_shoot_player.h	/^	double _max_x_dev;$/;"	m	class:cmp_shoot_player	access:private
_next_point	components/position/cmp_move_path.h	/^	uint32_t _next_point;$/;"	m	class:cmp_move_path	access:private
_num_debris	components/cmp_explode_when_die.h	/^	uint32_t _num_debris;$/;"	m	class:cmp_explode_when_die	access:private
_num_defs	components/appearance/cmp_appr_simple_anim.h	/^	uint32_t _num_defs;$/;"	m	class:cmp_appr_simple_anim	access:private
_num_frames	components/appearance/cmp_appr_simple_anim.h	/^	uint32_t _num_frames;$/;"	m	class:cmp_appr_simple_anim	access:private
_omega	components/position/cmp_rotate_const_speed.h	/^	double _omega;$/;"	m	class:cmp_rotate_const_speed	access:private
_overdue_frames	main.cpp	/^	uint32_t _overdue_frames;$/;"	m	class:application	file:	access:private
_pain_map	components/wellness/cmp_painmap.h	/^	map<collision_class, double> _pain_map;$/;"	m	class:cmp_painmap	access:private
_parent_id	components/component.h	/^	uint32_t _parent_id;$/;"	m	class:component	access:protected
_parent_id	entities/entity_builder.h	/^	uint32_t _parent_id;$/;"	m	class:entity_builder	access:private
_period	components/cmp_shoot_player.h	/^	double _period;$/;"	m	class:cmp_shoot_player	access:private
_points	components/position/cmp_move_path.h	/^	vector<point> _points;$/;"	m	class:cmp_move_path	access:private
_prev_x	components/position/cmp_orientation.h	/^	double _prev_x;$/;"	m	class:cmp_orientation	access:private
_prev_y	components/position/cmp_orientation.h	/^	double _prev_y;$/;"	m	class:cmp_orientation	access:private
_previous_left	components/cmp_shoot_player.h	/^	bool _previous_left;$/;"	m	class:cmp_shoot_player	access:private
_r	collision/circle.h	/^	double _r;$/;"	m	class:circle	access:private
_r	components/appearance/cmp_appr_pixel.h	/^	double _r;$/;"	m	class:cmp_appr_pixel	access:private
_rep_count	components/appearance/cmp_appr_simple_anim.h	/^	int _rep_count;$/;"	m	class:cmp_appr_simple_anim	access:private
_reports	components/cmp_collidable.h	/^	vector<coll_report> _reports;$/;"	m	class:cmp_collidable	access:private
_res	entities/entity_builder.h	/^	const resman& _res;$/;"	m	class:entity_builder	access:private
_resman	entities/entity_factory.h	/^	const resman& _resman;$/;"	m	class:entity_factory	access:private
_resman	game_state.cpp	/^	const resman& _resman;$/;"	m	class:game_state	file:	access:private
_resman	main.cpp	/^	resman _resman;$/;"	m	class:application	file:	access:private
_score	components/cmp_score_when_die.h	/^	double _score;$/;"	m	class:cmp_score_when_die	access:private
_shp	components/cmp_collidable.h	/^	shared_ptr<shape> _shp;$/;"	m	class:cmp_collidable	access:private
_spf	main.cpp	/^	double _spf;$/;"	m	class:application	file:	access:private
_star_spawn_clk	game_state.cpp	/^	random_clock<exponential_distribution<double>> _star_spawn_clk;$/;"	m	class:game_state	file:	access:private
_theta	components/position/cmp_orientation.h	/^	double _theta;$/;"	m	class:cmp_orientation	access:private
_time_to_switch	components/appearance/cmp_appr_simple_anim.h	/^	double _time_to_switch;$/;"	m	class:cmp_appr_simple_anim	access:private
_timer	allegro.h	/^	ALLEGRO_TIMER* _timer;$/;"	m	class:allegro	access:private
_timer	random_clock.h	/^	double _timer;$/;"	m	class:random_clock	access:private
_ttl	components/cmp_time_to_live.h	/^	double _ttl;$/;"	m	class:cmp_time_to_live	access:private
_vx	components/position/cmp_move_const_speed.h	/^	double _vx;$/;"	m	class:cmp_move_const_speed	access:private
_vy	components/emitters/cmp_bullet_emitter.h	/^	double _vy;$/;"	m	class:cmp_bullet_emitter	access:private
_vy	components/position/cmp_move_const_speed.h	/^	double _vy;$/;"	m	class:cmp_move_const_speed	access:private
_x	collision/circle.h	/^	double _x;$/;"	m	class:circle	access:private
_x	components/position/cmp_orientation.h	/^	double _x;$/;"	m	class:cmp_orientation	access:private
_x_max	components/bounds/cmp_bounded_life.h	/^	double _x_max;$/;"	m	class:cmp_bounded_life	access:private
_x_max	components/bounds/cmp_bounded_movement.h	/^	double _x_max;$/;"	m	class:cmp_bounded_movement	access:private
_x_min	components/bounds/cmp_bounded_life.h	/^	double _x_min;$/;"	m	class:cmp_bounded_life	access:private
_x_min	components/bounds/cmp_bounded_movement.h	/^	double _x_min;$/;"	m	class:cmp_bounded_movement	access:private
_y	collision/circle.h	/^	double _y;$/;"	m	class:circle	access:private
_y	components/position/cmp_orientation.h	/^	double _y;$/;"	m	class:cmp_orientation	access:private
_y_max	components/bounds/cmp_bounded_life.h	/^	double _y_max;$/;"	m	class:cmp_bounded_life	access:private
_y_max	components/bounds/cmp_bounded_movement.h	/^	double _y_max;$/;"	m	class:cmp_bounded_movement	access:private
_y_min	components/bounds/cmp_bounded_life.h	/^	double _y_min;$/;"	m	class:cmp_bounded_life	access:private
_y_min	components/bounds/cmp_bounded_movement.h	/^	double _y_min;$/;"	m	class:cmp_bounded_movement	access:private
a	geometry/types.h	/^	point a, b;$/;"	m	struct:segment	access:public
action	components/appearance/cmp_appr_bitmap.cpp	/^void cmp_appr_bitmap::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_bitmap	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/appearance/cmp_appr_bitmap.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_bitmap	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/appearance/cmp_appr_pixel.cpp	/^void cmp_appr_pixel::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_pixel	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/appearance/cmp_appr_pixel.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_pixel	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/appearance/cmp_appr_simple_anim.cpp	/^void cmp_appr_simple_anim::action($/;"	f	class:cmp_appr_simple_anim	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/appearance/cmp_appr_simple_anim.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_simple_anim	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/bounds/cmp_bounded_life.cpp	/^void cmp_bounded_life::action($/;"	f	class:cmp_bounded_life	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/bounds/cmp_bounded_life.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bounded_life	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/bounds/cmp_bounded_movement.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_bounded_movement	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/cmp_collidable.cpp	/^void cmp_collidable::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_collidable	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_collidable.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_collidable	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/cmp_die_end_anim.cpp	/^void cmp_die_end_anim::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_die_end_anim	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_die_end_anim.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_die_end_anim	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_drop_when_die.cpp	/^void cmp_drop_when_die::action($/;"	f	class:cmp_drop_when_die	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_drop_when_die.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_drop_when_die	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/cmp_explode_when_die.cpp	/^void cmp_explode_when_die::action($/;"	f	class:cmp_explode_when_die	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_explode_when_die.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_explode_when_die	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_score_when_die.cpp	/^void cmp_score_when_die::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_score_when_die	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_score_when_die.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_score_when_die	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_shoot_player.cpp	/^void cmp_shoot_player::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_shoot_player	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_shoot_player.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_shoot_player	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/cmp_time_to_live.cpp	/^void cmp_time_to_live::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_time_to_live	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/cmp_time_to_live.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_time_to_live	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/component.h	/^	virtual void action($/;"	p	class:component	access:public	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/emitters/cmp_bullet_emitter.cpp	/^void cmp_bullet_emitter::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_bullet_emitter	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/emitters/cmp_bullet_emitter.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bullet_emitter	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/position/cmp_move_const_speed.cpp	/^void cmp_move_const_speed::action($/;"	f	class:cmp_move_const_speed	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/position/cmp_move_const_speed.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_const_speed	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/position/cmp_move_path.cpp	/^void cmp_move_path::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_path	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/position/cmp_move_path.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_path	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/position/cmp_move_player.cpp	/^void cmp_move_player::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_player	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/position/cmp_move_player.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_player	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/position/cmp_orientation.cpp	/^void cmp_orientation::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_orientation	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/position/cmp_orientation.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_orientation	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/position/cmp_rotate_const_speed.cpp	/^void cmp_rotate_const_speed::action($/;"	f	class:cmp_rotate_const_speed	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/position/cmp_rotate_const_speed.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_rotate_const_speed	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_health_etc.cpp	/^void cmp_health_etc::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_health_etc	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_health_etc.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_etc	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_health_picker.cpp	/^void cmp_health_picker::action($/;"	f	class:cmp_health_picker	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_health_picker.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_picker	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_painmap.cpp	/^void cmp_painmap::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_painmap	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_painmap.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_painmap	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_player_health.cpp	/^void cmp_player_health::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_player_health	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_player_health.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_player_health	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_smoke_when_hurt.cpp	/^void cmp_smoke_when_hurt::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_smoke_when_hurt	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
action	components/wellness/cmp_smoke_when_hurt.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_smoke_when_hurt	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
action	entities/entity.cpp	/^void entity::action(const config& cfg, game_model& gm) {$/;"	f	class:entity	signature:(const config& cfg, game_model& gm)
action	entities/entity.h	/^	void action(const config& cfg, game_model& gs);$/;"	p	class:entity	access:public	signature:(const config& cfg, game_model& gs)
add_appr_bitmap	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_appr_bitmap(res_id bitmap_id) {$/;"	f	class:entity_builder	signature:(res_id bitmap_id)
add_appr_bitmap	entities/entity_builder.h	/^	entity_builder& add_appr_bitmap(res_id bitmap_id);$/;"	p	class:entity_builder	access:public	signature:(res_id bitmap_id)
add_appr_pixel	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_appr_pixel(double r, double g, double b, double a) {$/;"	f	class:entity_builder	signature:(double r, double g, double b, double a)
add_appr_pixel	entities/entity_builder.h	/^	entity_builder& add_appr_pixel(double r, double g, double b, double a);$/;"	p	class:entity_builder	access:public	signature:(double r, double g, double b, double a)
add_appr_simple_anim	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_appr_simple_anim(res_id bitmap_id, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count) {$/;"	f	class:entity_builder	signature:(res_id bitmap_id, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count)
add_appr_simple_anim	entities/entity_builder.h	/^	entity_builder& add_appr_simple_anim(res_id bitmap_id, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count);$/;"	p	class:entity_builder	access:public	signature:(res_id bitmap_id, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count)
add_bitmap	resources/resman.cpp	/^void resman::add_bitmap(res_id id, string path) {$/;"	f	class:resman	signature:(res_id id, string path)
add_bitmap	resources/resman.h	/^	void add_bitmap(res_id id, string path);$/;"	p	class:resman	access:private	signature:(res_id id, string path)
add_bounded_life	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_bounded_life(double x_min, double x_max, double y_min, double y_max) {$/;"	f	class:entity_builder	signature:(double x_min, double x_max, double y_min, double y_max)
add_bounded_life	entities/entity_builder.h	/^	entity_builder& add_bounded_life(double x_min, double x_max, double y_min, double y_max);$/;"	p	class:entity_builder	access:public	signature:(double x_min, double x_max, double y_min, double y_max)
add_bounded_movement	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_bounded_movement(double x_min, double x_max, double y_min, double y_max) {$/;"	f	class:entity_builder	signature:(double x_min, double x_max, double y_min, double y_max)
add_bounded_movement	entities/entity_builder.h	/^	entity_builder& add_bounded_movement(double x_min, double x_max, double y_min, double y_max);$/;"	p	class:entity_builder	access:public	signature:(double x_min, double x_max, double y_min, double y_max)
add_bullet_emitter	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_bullet_emitter(double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy) {$/;"	f	class:entity_builder	signature:(double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy)
add_bullet_emitter	entities/entity_builder.h	/^	entity_builder& add_bullet_emitter(double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy);$/;"	p	class:entity_builder	access:public	signature:(double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy)
add_collidable	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_collidable(collision_class cc, shared_ptr<shape> shp, collision_space& cs) {$/;"	f	class:entity_builder	signature:(collision_class cc, shared_ptr<shape> shp, collision_space& cs)
add_collidable	entities/entity_builder.h	/^	entity_builder& add_collidable(collision_class cc, shared_ptr<shape> shp, collision_space& cs);$/;"	p	class:entity_builder	access:public	signature:(collision_class cc, shared_ptr<shape> shp, collision_space& cs)
add_die_end_anim	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_die_end_anim() {$/;"	f	class:entity_builder	signature:()
add_die_end_anim	entities/entity_builder.h	/^	entity_builder& add_die_end_anim();$/;"	p	class:entity_builder	access:public	signature:()
add_drop_when_die	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_drop_when_die(drop_t drop_type) {$/;"	f	class:entity_builder	signature:(drop_t drop_type)
add_drop_when_die	entities/entity_builder.h	/^	entity_builder& add_drop_when_die(drop_t drop_type);$/;"	p	class:entity_builder	access:public	signature:(drop_t drop_type)
add_explode_when_die	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_explode_when_die(uint32_t num_debris) {$/;"	f	class:entity_builder	signature:(uint32_t num_debris)
add_explode_when_die	entities/entity_builder.h	/^	entity_builder& add_explode_when_die(uint32_t num_debris);$/;"	p	class:entity_builder	access:public	signature:(uint32_t num_debris)
add_font	resources/resman.cpp	/^void resman::add_font(res_id id, string path) {$/;"	f	class:resman	signature:(res_id id, string path)
add_font	resources/resman.h	/^	void add_font(res_id id, string path);$/;"	p	class:resman	access:private	signature:(res_id id, string path)
add_health_etc	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_health_etc(double health, double armor) {$/;"	f	class:entity_builder	signature:(double health, double armor)
add_health_etc	entities/entity_builder.h	/^	entity_builder& add_health_etc(double health, double armor);$/;"	p	class:entity_builder	access:public	signature:(double health, double armor)
add_health_picker	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_health_picker($/;"	f	class:entity_builder	signature:( double health_boost, double armor_boost)
add_health_picker	entities/entity_builder.h	/^	entity_builder& add_health_picker(double health_boost, double armor_boost);$/;"	p	class:entity_builder	access:public	signature:(double health_boost, double armor_boost)
add_move_const_speed	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_move_const_speed(double vx, double vy) {$/;"	f	class:entity_builder	signature:(double vx, double vy)
add_move_const_speed	entities/entity_builder.h	/^	entity_builder& add_move_const_speed(double vx, double vy);$/;"	p	class:entity_builder	access:public	signature:(double vx, double vy)
add_move_path	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_move_path(vector<point> points) {$/;"	f	class:entity_builder	signature:(vector<point> points)
add_move_path	entities/entity_builder.h	/^	entity_builder& add_move_path(vector<point> points);$/;"	p	class:entity_builder	access:public	signature:(vector<point> points)
add_move_player	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_move_player() {$/;"	f	class:entity_builder	signature:()
add_move_player	entities/entity_builder.h	/^	entity_builder& add_move_player();$/;"	p	class:entity_builder	access:public	signature:()
add_orientation	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_orientation(double x, double y, double theta) {$/;"	f	class:entity_builder	signature:(double x, double y, double theta)
add_orientation	entities/entity_builder.h	/^	entity_builder& add_orientation(double x, double y, double theta);$/;"	p	class:entity_builder	access:public	signature:(double x, double y, double theta)
add_painmap	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_painmap(map<collision_class, double> pain_map) {$/;"	f	class:entity_builder	signature:(map<collision_class, double> pain_map)
add_painmap	entities/entity_builder.h	/^	entity_builder& add_painmap(map<collision_class, double> pain_map);$/;"	p	class:entity_builder	access:public	signature:(map<collision_class, double> pain_map)
add_player_health	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_player_health() {$/;"	f	class:entity_builder	signature:()
add_player_health	entities/entity_builder.h	/^	entity_builder& add_player_health();$/;"	p	class:entity_builder	access:public	signature:()
add_rotate_const_speed	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_rotate_const_speed(double omega) {$/;"	f	class:entity_builder	signature:(double omega)
add_rotate_const_speed	entities/entity_builder.h	/^	entity_builder& add_rotate_const_speed(double omega);$/;"	p	class:entity_builder	access:public	signature:(double omega)
add_score_when_die	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_score_when_die(double score) {$/;"	f	class:entity_builder	signature:(double score)
add_score_when_die	entities/entity_builder.h	/^	entity_builder& add_score_when_die(double score);$/;"	p	class:entity_builder	access:public	signature:(double score)
add_shoot_player	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_shoot_player(double period, double max_x_dev) {$/;"	f	class:entity_builder	signature:(double period, double max_x_dev)
add_shoot_player	entities/entity_builder.h	/^	entity_builder& add_shoot_player(double period, double max_x_dev);$/;"	p	class:entity_builder	access:public	signature:(double period, double max_x_dev)
add_smoke_when_hurt	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_smoke_when_hurt() {$/;"	f	class:entity_builder	signature:()
add_smoke_when_hurt	entities/entity_builder.h	/^	entity_builder& add_smoke_when_hurt();$/;"	p	class:entity_builder	access:public	signature:()
add_time_to_live	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_time_to_live(double ttl) {$/;"	f	class:entity_builder	signature:(double ttl)
add_time_to_live	entities/entity_builder.h	/^	entity_builder& add_time_to_live(double ttl);$/;"	p	class:entity_builder	access:public	signature:(double ttl)
allegro	allegro.cpp	/^allegro::allegro(uint32_t scr_w, uint32_t scr_h, string title, double fps) {$/;"	f	class:allegro	signature:(uint32_t scr_w, uint32_t scr_h, string title, double fps)
allegro	allegro.h	/^	allegro(uint32_t scr_w, uint32_t scr_h, string title, double fps);$/;"	p	class:allegro	access:public	signature:(uint32_t scr_w, uint32_t scr_h, string title, double fps)
allegro	allegro.h	/^class allegro {$/;"	c
allegro::_display	allegro.h	/^	ALLEGRO_DISPLAY* _display;$/;"	m	class:allegro	access:private
allegro::_event_queue	allegro.h	/^	ALLEGRO_EVENT_QUEUE* _event_queue;$/;"	m	class:allegro	access:private
allegro::_timer	allegro.h	/^	ALLEGRO_TIMER* _timer;$/;"	m	class:allegro	access:private
allegro::allegro	allegro.cpp	/^allegro::allegro(uint32_t scr_w, uint32_t scr_h, string title, double fps) {$/;"	f	class:allegro	signature:(uint32_t scr_w, uint32_t scr_h, string title, double fps)
allegro::allegro	allegro.h	/^	allegro(uint32_t scr_w, uint32_t scr_h, string title, double fps);$/;"	p	class:allegro	access:public	signature:(uint32_t scr_w, uint32_t scr_h, string title, double fps)
allegro::dump_events	allegro.cpp	/^void allegro::dump_events(state& s, uint32_t& overdue_frames) {$/;"	f	class:allegro	signature:(state& s, uint32_t& overdue_frames)
allegro::dump_events	allegro.h	/^	void dump_events(state& s, uint32_t& overdue_frames);$/;"	p	class:allegro	access:public	signature:(state& s, uint32_t& overdue_frames)
allegro::get_display	allegro.cpp	/^ALLEGRO_DISPLAY* allegro::get_display() {$/;"	f	class:allegro	signature:()
allegro::get_display	allegro.h	/^	ALLEGRO_DISPLAY* get_display();$/;"	p	class:allegro	access:public	signature:()
allegro::handle_event	allegro.cpp	/^void allegro::handle_event(ALLEGRO_EVENT& ev, state& s, uint32_t& overdue_frame) {$/;"	f	class:allegro	signature:(ALLEGRO_EVENT& ev, state& s, uint32_t& overdue_frame)
allegro::handle_event	allegro.h	/^	void handle_event(ALLEGRO_EVENT& ev, state& s, uint32_t& overdue_frame);$/;"	p	class:allegro	access:private	signature:(ALLEGRO_EVENT& ev, state& s, uint32_t& overdue_frame)
allegro::swap_buffers	allegro.cpp	/^void allegro::swap_buffers() {$/;"	f	class:allegro	signature:()
allegro::swap_buffers	allegro.h	/^	void swap_buffers();$/;"	p	class:allegro	access:public	signature:()
allegro::~allegro	allegro.cpp	/^allegro::~allegro() {$/;"	f	class:allegro	signature:()
allegro::~allegro	allegro.h	/^	~allegro();$/;"	p	class:allegro	access:public	signature:()
amount	components/component.h	/^		double amount;$/;"	m	struct:ent_msg::__anon8	access:public
animation_end_reached	components/component.h	/^	} animation_end_reached;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon1	access:public
application	main.cpp	/^	application()$/;"	f	class:application	access:public	signature:()
application	main.cpp	/^class application {$/;"	c	file:
application::_allegro	main.cpp	/^	allegro _allegro;$/;"	m	class:application	file:	access:private
application::_config	main.cpp	/^	config _config;$/;"	m	class:application	file:	access:private
application::_fps	main.cpp	/^	double _fps;$/;"	m	class:application	file:	access:private
application::_overdue_frames	main.cpp	/^	uint32_t _overdue_frames;$/;"	m	class:application	file:	access:private
application::_resman	main.cpp	/^	resman _resman;$/;"	m	class:application	file:	access:private
application::_spf	main.cpp	/^	double _spf;$/;"	m	class:application	file:	access:private
application::application	main.cpp	/^	application()$/;"	f	class:application	access:public	signature:()
application::loop	main.cpp	/^	void loop() {$/;"	f	class:application	access:public	signature:()
armor	components/component.h	/^		double armor;$/;"	m	struct:ent_msg::__anon10	access:public
armor	components/component.h	/^		double armor;$/;"	m	struct:ent_msg::__anon4	access:public
b	geometry/types.h	/^	point a, b;$/;"	m	struct:segment	access:public
begin	entities/entity_builder.cpp	/^entity_builder& entity_builder::begin(uint32_t parent_id) {$/;"	f	class:entity_builder	signature:(uint32_t parent_id)
begin	entities/entity_builder.h	/^	entity_builder& begin(uint32_t parent_id);$/;"	p	class:entity_builder	access:public	signature:(uint32_t parent_id)
bezier	geometry/bezier.cpp	/^vector<point> bezier(const vector<point>& points, uint32_t num_midpoints) {$/;"	f	signature:(const vector<point>& points, uint32_t num_midpoints)
bezier_gen_segments	geometry/bezier.cpp	/^static inline vector<segment> bezier_gen_segments(const vector<point>& points) {$/;"	f	file:	signature:(const vector<point>& points)
bezier_interpolate_points	geometry/bezier.cpp	/^static inline vector<point> bezier_interpolate_points(const vector<segment>& segments, double step) {$/;"	f	file:	signature:(const vector<segment>& segments, double step)
bezier_interpolate_segment	geometry/bezier.cpp	/^static inline point bezier_interpolate_segment(const segment& s, double step) {$/;"	f	file:	signature:(const segment& s, double step)
bezier_interpolate_value	geometry/bezier.cpp	/^static inline double bezier_interpolate_value(double x0, double x1, double step) {$/;"	f	file:	signature:(double x0, double x1, double step)
bitmap_deleter	resources/resman.h	/^	struct bitmap_deleter {$/;"	s	class:resman	access:private
bitmap_id	game_model.h	/^		res_id bitmap_id;$/;"	m	struct:game_msg::__anon12	access:public
build	entities/entity_builder.cpp	/^entity entity_builder::build() {$/;"	f	class:entity_builder	signature:()
build	entities/entity_builder.h	/^	entity build();$/;"	p	class:entity_builder	access:public	signature:()
callback	collision/collision_space.h	/^	function<void(const coll_report&)> callback;$/;"	m	struct:coll_entry	access:public
callback	components/cmp_collidable.cpp	/^void cmp_collidable::callback(const coll_report& report) {$/;"	f	class:cmp_collidable	signature:(const coll_report& report)
callback	components/cmp_collidable.h	/^	void callback(const coll_report& report);$/;"	p	class:cmp_collidable	access:public	signature:(const coll_report& report)
cancel_dx	components/component.h	/^		bool cancel_dx;$/;"	m	struct:ent_msg::__anon2	access:public
cancel_dy	components/component.h	/^		bool cancel_dy;$/;"	m	struct:ent_msg::__anon2	access:public
cancel_move	components/component.h	/^	} cancel_move;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon2	access:public
cc	collision/collision_space.h	/^	collision_class cc;$/;"	m	struct:coll_entry	access:public
cc	components/component.h	/^		collision_class cc;$/;"	m	struct:ent_msg::__anon3	access:public
check_collisions	collision/collision_space.cpp	/^void collision_space::check_collisions() {$/;"	f	class:collision_space	signature:()
check_collisions	collision/collision_space.h	/^	void check_collisions();$/;"	p	class:collision_space	access:public	signature:()
circle	collision/circle.cpp	/^circle::circle(uint32_t id, double x, double y, double r)$/;"	f	class:circle	signature:(uint32_t id, double x, double y, double r)
circle	collision/circle.h	/^	circle(uint32_t id, double x, double y, double r);$/;"	p	class:circle	access:public	signature:(uint32_t id, double x, double y, double r)
circle	collision/circle.h	/^class circle : public shape {$/;"	c	inherits:shape
circle::_r	collision/circle.h	/^	double _r;$/;"	m	class:circle	access:private
circle::_x	collision/circle.h	/^	double _x;$/;"	m	class:circle	access:private
circle::_y	collision/circle.h	/^	double _y;$/;"	m	class:circle	access:private
circle::circle	collision/circle.cpp	/^circle::circle(uint32_t id, double x, double y, double r)$/;"	f	class:circle	signature:(uint32_t id, double x, double y, double r)
circle::circle	collision/circle.h	/^	circle(uint32_t id, double x, double y, double r);$/;"	p	class:circle	access:public	signature:(uint32_t id, double x, double y, double r)
circle::collide_with	collision/circle.cpp	/^bool circle::collide_with(const shape& s) const {$/;"	f	class:circle	signature:(const shape& s) const
circle::collide_with	collision/circle.h	/^	bool collide_with(const shape& s) const;$/;"	p	class:circle	access:public	signature:(const shape& s) const
circle::collide_with_circle	collision/circle.cpp	/^bool circle::collide_with_circle(const circle& c) const {$/;"	f	class:circle	signature:(const circle& c) const
circle::collide_with_circle	collision/circle.h	/^	bool collide_with_circle(const circle& c) const;$/;"	p	class:circle	access:public	signature:(const circle& c) const
circle::get_r	collision/circle.h	/^	double get_r() const { return _r; }$/;"	f	class:circle	access:public	signature:() const
circle::get_x	collision/circle.h	/^	double get_x() const { return _x; }$/;"	f	class:circle	access:public	signature:() const
circle::get_y	collision/circle.h	/^	double get_y() const { return _y; }$/;"	f	class:circle	access:public	signature:() const
circle::shift	collision/circle.h	/^	void shift(double dx, double dy) { _x += dx; _y += dy; }$/;"	f	class:circle	access:public	signature:(double dx, double dy)
class_a	collision/collision_space.h	/^	collision_class class_a;$/;"	m	struct:coll_report	access:public
class_b	collision/collision_space.h	/^	collision_class class_b;$/;"	m	struct:coll_report	access:public
cmp_appr_bitmap	components/appearance/cmp_appr_bitmap.cpp	/^cmp_appr_bitmap::cmp_appr_bitmap(uint32_t parent_id, ALLEGRO_BITMAP* bitmap)$/;"	f	class:cmp_appr_bitmap	signature:(uint32_t parent_id, ALLEGRO_BITMAP* bitmap)
cmp_appr_bitmap	components/appearance/cmp_appr_bitmap.h	/^	cmp_appr_bitmap(uint32_t parent_id, ALLEGRO_BITMAP* bitmap);$/;"	p	class:cmp_appr_bitmap	access:public	signature:(uint32_t parent_id, ALLEGRO_BITMAP* bitmap)
cmp_appr_bitmap	components/appearance/cmp_appr_bitmap.h	/^class cmp_appr_bitmap : public component {$/;"	c	inherits:component
cmp_appr_bitmap::_bitmap	components/appearance/cmp_appr_bitmap.h	/^	ALLEGRO_BITMAP* _bitmap;$/;"	m	class:cmp_appr_bitmap	access:private
cmp_appr_bitmap::_last_theta	components/appearance/cmp_appr_bitmap.h	/^	double _last_theta;$/;"	m	class:cmp_appr_bitmap	access:private
cmp_appr_bitmap::_last_x	components/appearance/cmp_appr_bitmap.h	/^	double _last_x;$/;"	m	class:cmp_appr_bitmap	access:private
cmp_appr_bitmap::_last_y	components/appearance/cmp_appr_bitmap.h	/^	double _last_y;$/;"	m	class:cmp_appr_bitmap	access:private
cmp_appr_bitmap::action	components/appearance/cmp_appr_bitmap.cpp	/^void cmp_appr_bitmap::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_bitmap	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_appr_bitmap::action	components/appearance/cmp_appr_bitmap.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_bitmap	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_appr_bitmap::cmp_appr_bitmap	components/appearance/cmp_appr_bitmap.cpp	/^cmp_appr_bitmap::cmp_appr_bitmap(uint32_t parent_id, ALLEGRO_BITMAP* bitmap)$/;"	f	class:cmp_appr_bitmap	signature:(uint32_t parent_id, ALLEGRO_BITMAP* bitmap)
cmp_appr_bitmap::cmp_appr_bitmap	components/appearance/cmp_appr_bitmap.h	/^	cmp_appr_bitmap(uint32_t parent_id, ALLEGRO_BITMAP* bitmap);$/;"	p	class:cmp_appr_bitmap	access:public	signature:(uint32_t parent_id, ALLEGRO_BITMAP* bitmap)
cmp_appr_bitmap::deinitialize	components/appearance/cmp_appr_bitmap.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_appr_bitmap	access:public	signature:(game_model& gm)
cmp_appr_bitmap::initialize	components/appearance/cmp_appr_bitmap.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_appr_bitmap	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_appr_bitmap::receive_message	components/appearance/cmp_appr_bitmap.cpp	/^void cmp_appr_bitmap::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_bitmap	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_appr_bitmap::receive_message	components/appearance/cmp_appr_bitmap.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_bitmap	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_appr_pixel	components/appearance/cmp_appr_pixel.cpp	/^cmp_appr_pixel::cmp_appr_pixel(uint32_t parent_id, double r, double g, double b, double a) $/;"	f	class:cmp_appr_pixel	signature:(uint32_t parent_id, double r, double g, double b, double a)
cmp_appr_pixel	components/appearance/cmp_appr_pixel.h	/^	cmp_appr_pixel(uint32_t parent_id, double r, double g, double b, double a);$/;"	p	class:cmp_appr_pixel	access:public	signature:(uint32_t parent_id, double r, double g, double b, double a)
cmp_appr_pixel	components/appearance/cmp_appr_pixel.h	/^class cmp_appr_pixel : public component {$/;"	c	inherits:component
cmp_appr_pixel::_a	components/appearance/cmp_appr_pixel.h	/^	double _a;$/;"	m	class:cmp_appr_pixel	access:private
cmp_appr_pixel::_b	components/appearance/cmp_appr_pixel.h	/^	double _b;$/;"	m	class:cmp_appr_pixel	access:private
cmp_appr_pixel::_g	components/appearance/cmp_appr_pixel.h	/^	double _g;$/;"	m	class:cmp_appr_pixel	access:private
cmp_appr_pixel::_last_x	components/appearance/cmp_appr_pixel.h	/^	double _last_x;$/;"	m	class:cmp_appr_pixel	access:private
cmp_appr_pixel::_last_y	components/appearance/cmp_appr_pixel.h	/^	double _last_y;$/;"	m	class:cmp_appr_pixel	access:private
cmp_appr_pixel::_r	components/appearance/cmp_appr_pixel.h	/^	double _r;$/;"	m	class:cmp_appr_pixel	access:private
cmp_appr_pixel::action	components/appearance/cmp_appr_pixel.cpp	/^void cmp_appr_pixel::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_pixel	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_appr_pixel::action	components/appearance/cmp_appr_pixel.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_pixel	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_appr_pixel::cmp_appr_pixel	components/appearance/cmp_appr_pixel.cpp	/^cmp_appr_pixel::cmp_appr_pixel(uint32_t parent_id, double r, double g, double b, double a) $/;"	f	class:cmp_appr_pixel	signature:(uint32_t parent_id, double r, double g, double b, double a)
cmp_appr_pixel::cmp_appr_pixel	components/appearance/cmp_appr_pixel.h	/^	cmp_appr_pixel(uint32_t parent_id, double r, double g, double b, double a);$/;"	p	class:cmp_appr_pixel	access:public	signature:(uint32_t parent_id, double r, double g, double b, double a)
cmp_appr_pixel::deinitialize	components/appearance/cmp_appr_pixel.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_appr_pixel	access:public	signature:(game_model& gm)
cmp_appr_pixel::initialize	components/appearance/cmp_appr_pixel.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_appr_pixel	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_appr_pixel::receive_message	components/appearance/cmp_appr_pixel.cpp	/^void cmp_appr_pixel::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_pixel	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_appr_pixel::receive_message	components/appearance/cmp_appr_pixel.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_pixel	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_appr_simple_anim	components/appearance/cmp_appr_simple_anim.cpp	/^cmp_appr_simple_anim::cmp_appr_simple_anim($/;"	f	class:cmp_appr_simple_anim	signature:( uint32_t parent_id, ALLEGRO_BITMAP* bitmap, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count)
cmp_appr_simple_anim	components/appearance/cmp_appr_simple_anim.h	/^	cmp_appr_simple_anim($/;"	p	class:cmp_appr_simple_anim	access:public	signature:( uint32_t parent_id, ALLEGRO_BITMAP* bitmap, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count)
cmp_appr_simple_anim	components/appearance/cmp_appr_simple_anim.h	/^class cmp_appr_simple_anim : public component {$/;"	c	inherits:component
cmp_appr_simple_anim::_bitmap	components/appearance/cmp_appr_simple_anim.h	/^	ALLEGRO_BITMAP* _bitmap;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_current_def	components/appearance/cmp_appr_simple_anim.h	/^	uint32_t _current_def;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_done	components/appearance/cmp_appr_simple_anim.h	/^	double _done;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_frame_defs	components/appearance/cmp_appr_simple_anim.h	/^	array<frame_def, 128> _frame_defs;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_frame_images	components/appearance/cmp_appr_simple_anim.h	/^	array<ALLEGRO_BITMAP*, 128> _frame_images;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_frame_width	components/appearance/cmp_appr_simple_anim.h	/^	uint32_t _frame_width;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_last_theta	components/appearance/cmp_appr_simple_anim.h	/^	double _last_theta;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_last_x	components/appearance/cmp_appr_simple_anim.h	/^	double _last_x;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_last_y	components/appearance/cmp_appr_simple_anim.h	/^	double _last_y;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_num_defs	components/appearance/cmp_appr_simple_anim.h	/^	uint32_t _num_defs;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_num_frames	components/appearance/cmp_appr_simple_anim.h	/^	uint32_t _num_frames;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_rep_count	components/appearance/cmp_appr_simple_anim.h	/^	int _rep_count;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::_time_to_switch	components/appearance/cmp_appr_simple_anim.h	/^	double _time_to_switch;$/;"	m	class:cmp_appr_simple_anim	access:private
cmp_appr_simple_anim::action	components/appearance/cmp_appr_simple_anim.cpp	/^void cmp_appr_simple_anim::action($/;"	f	class:cmp_appr_simple_anim	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_appr_simple_anim::action	components/appearance/cmp_appr_simple_anim.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_simple_anim	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_appr_simple_anim::cmp_appr_simple_anim	components/appearance/cmp_appr_simple_anim.cpp	/^cmp_appr_simple_anim::cmp_appr_simple_anim($/;"	f	class:cmp_appr_simple_anim	signature:( uint32_t parent_id, ALLEGRO_BITMAP* bitmap, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count)
cmp_appr_simple_anim::cmp_appr_simple_anim	components/appearance/cmp_appr_simple_anim.h	/^	cmp_appr_simple_anim($/;"	p	class:cmp_appr_simple_anim	access:public	signature:( uint32_t parent_id, ALLEGRO_BITMAP* bitmap, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count)
cmp_appr_simple_anim::deinitialize	components/appearance/cmp_appr_simple_anim.cpp	/^void cmp_appr_simple_anim::deinitialize(game_model& gm) {$/;"	f	class:cmp_appr_simple_anim	signature:(game_model& gm)
cmp_appr_simple_anim::deinitialize	components/appearance/cmp_appr_simple_anim.h	/^	void deinitialize(game_model& gm);$/;"	p	class:cmp_appr_simple_anim	access:public	signature:(game_model& gm)
cmp_appr_simple_anim::initialize	components/appearance/cmp_appr_simple_anim.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_appr_simple_anim	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_appr_simple_anim::receive_message	components/appearance/cmp_appr_simple_anim.cpp	/^void cmp_appr_simple_anim::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_simple_anim	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_appr_simple_anim::receive_message	components/appearance/cmp_appr_simple_anim.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_simple_anim	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_bounded_life	components/bounds/cmp_bounded_life.cpp	/^cmp_bounded_life::cmp_bounded_life(uint32_t parent_id, double x_min, double x_max, double y_min, double y_max)$/;"	f	class:cmp_bounded_life	signature:(uint32_t parent_id, double x_min, double x_max, double y_min, double y_max)
cmp_bounded_life	components/bounds/cmp_bounded_life.h	/^	cmp_bounded_life(uint32_t parent_id, double min_x, double max_x, double min_y, double max_y);$/;"	p	class:cmp_bounded_life	access:public	signature:(uint32_t parent_id, double min_x, double max_x, double min_y, double max_y)
cmp_bounded_life	components/bounds/cmp_bounded_life.h	/^class cmp_bounded_life : public component {$/;"	c	inherits:component
cmp_bounded_life::_last_x	components/bounds/cmp_bounded_life.h	/^	double _last_x;$/;"	m	class:cmp_bounded_life	access:private
cmp_bounded_life::_last_y	components/bounds/cmp_bounded_life.h	/^	double _last_y;$/;"	m	class:cmp_bounded_life	access:private
cmp_bounded_life::_x_max	components/bounds/cmp_bounded_life.h	/^	double _x_max;$/;"	m	class:cmp_bounded_life	access:private
cmp_bounded_life::_x_min	components/bounds/cmp_bounded_life.h	/^	double _x_min;$/;"	m	class:cmp_bounded_life	access:private
cmp_bounded_life::_y_max	components/bounds/cmp_bounded_life.h	/^	double _y_max;$/;"	m	class:cmp_bounded_life	access:private
cmp_bounded_life::_y_min	components/bounds/cmp_bounded_life.h	/^	double _y_min;$/;"	m	class:cmp_bounded_life	access:private
cmp_bounded_life::action	components/bounds/cmp_bounded_life.cpp	/^void cmp_bounded_life::action($/;"	f	class:cmp_bounded_life	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_bounded_life::action	components/bounds/cmp_bounded_life.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bounded_life	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_bounded_life::cmp_bounded_life	components/bounds/cmp_bounded_life.cpp	/^cmp_bounded_life::cmp_bounded_life(uint32_t parent_id, double x_min, double x_max, double y_min, double y_max)$/;"	f	class:cmp_bounded_life	signature:(uint32_t parent_id, double x_min, double x_max, double y_min, double y_max)
cmp_bounded_life::cmp_bounded_life	components/bounds/cmp_bounded_life.h	/^	cmp_bounded_life(uint32_t parent_id, double min_x, double max_x, double min_y, double max_y);$/;"	p	class:cmp_bounded_life	access:public	signature:(uint32_t parent_id, double min_x, double max_x, double min_y, double max_y)
cmp_bounded_life::deinitialize	components/bounds/cmp_bounded_life.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_bounded_life	access:public	signature:(game_model& gm)
cmp_bounded_life::initialize	components/bounds/cmp_bounded_life.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_bounded_life	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_bounded_life::receive_message	components/bounds/cmp_bounded_life.cpp	/^void cmp_bounded_life::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_bounded_life	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_bounded_life::receive_message	components/bounds/cmp_bounded_life.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bounded_life	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_bounded_movement	components/bounds/cmp_bounded_movement.cpp	/^cmp_bounded_movement::cmp_bounded_movement($/;"	f	class:cmp_bounded_movement	signature:( uint32_t parent_id, double min_x, double max_x, double min_y, double max_y)
cmp_bounded_movement	components/bounds/cmp_bounded_movement.h	/^	cmp_bounded_movement($/;"	p	class:cmp_bounded_movement	access:public	signature:( uint32_t parent_id, double min_x, double max_x, double min_y, double max_y)
cmp_bounded_movement	components/bounds/cmp_bounded_movement.h	/^class cmp_bounded_movement : public component {$/;"	c	inherits:component
cmp_bounded_movement::_x_max	components/bounds/cmp_bounded_movement.h	/^	double _x_max;$/;"	m	class:cmp_bounded_movement	access:private
cmp_bounded_movement::_x_min	components/bounds/cmp_bounded_movement.h	/^	double _x_min;$/;"	m	class:cmp_bounded_movement	access:private
cmp_bounded_movement::_y_max	components/bounds/cmp_bounded_movement.h	/^	double _y_max;$/;"	m	class:cmp_bounded_movement	access:private
cmp_bounded_movement::_y_min	components/bounds/cmp_bounded_movement.h	/^	double _y_min;$/;"	m	class:cmp_bounded_movement	access:private
cmp_bounded_movement::action	components/bounds/cmp_bounded_movement.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_bounded_movement	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_bounded_movement::cmp_bounded_movement	components/bounds/cmp_bounded_movement.cpp	/^cmp_bounded_movement::cmp_bounded_movement($/;"	f	class:cmp_bounded_movement	signature:( uint32_t parent_id, double min_x, double max_x, double min_y, double max_y)
cmp_bounded_movement::cmp_bounded_movement	components/bounds/cmp_bounded_movement.h	/^	cmp_bounded_movement($/;"	p	class:cmp_bounded_movement	access:public	signature:( uint32_t parent_id, double min_x, double max_x, double min_y, double max_y)
cmp_bounded_movement::deinitialize	components/bounds/cmp_bounded_movement.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_bounded_movement	access:public	signature:(game_model& gm)
cmp_bounded_movement::initialize	components/bounds/cmp_bounded_movement.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_bounded_movement	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_bounded_movement::receive_message	components/bounds/cmp_bounded_movement.cpp	/^void cmp_bounded_movement::receive_message($/;"	f	class:cmp_bounded_movement	signature:( const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_bounded_movement::receive_message	components/bounds/cmp_bounded_movement.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bounded_movement	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_bullet_emitter	components/emitters/cmp_bullet_emitter.cpp	/^cmp_bullet_emitter::cmp_bullet_emitter($/;"	f	class:cmp_bullet_emitter	signature:( uint32_t parent_id, double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy)
cmp_bullet_emitter	components/emitters/cmp_bullet_emitter.h	/^	cmp_bullet_emitter($/;"	p	class:cmp_bullet_emitter	access:public	signature:( uint32_t parent_id, double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy)
cmp_bullet_emitter	components/emitters/cmp_bullet_emitter.h	/^class cmp_bullet_emitter : public component {$/;"	c	inherits:component
cmp_bullet_emitter::_bitmap_id	components/emitters/cmp_bullet_emitter.h	/^	res_id _bitmap_id;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::_counter	components/emitters/cmp_bullet_emitter.h	/^	double _counter;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::_dt_max	components/emitters/cmp_bullet_emitter.h	/^	double _dt_max;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::_dt_min	components/emitters/cmp_bullet_emitter.h	/^	double _dt_min;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::_engine	components/emitters/cmp_bullet_emitter.h	/^	default_random_engine _engine;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::_is_enemy	components/emitters/cmp_bullet_emitter.h	/^	bool _is_enemy;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::_last_x	components/emitters/cmp_bullet_emitter.h	/^	double _last_x;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::_last_y	components/emitters/cmp_bullet_emitter.h	/^	double _last_y;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::_vy	components/emitters/cmp_bullet_emitter.h	/^	double _vy;$/;"	m	class:cmp_bullet_emitter	access:private
cmp_bullet_emitter::action	components/emitters/cmp_bullet_emitter.cpp	/^void cmp_bullet_emitter::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_bullet_emitter	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_bullet_emitter::action	components/emitters/cmp_bullet_emitter.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bullet_emitter	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_bullet_emitter::cmp_bullet_emitter	components/emitters/cmp_bullet_emitter.cpp	/^cmp_bullet_emitter::cmp_bullet_emitter($/;"	f	class:cmp_bullet_emitter	signature:( uint32_t parent_id, double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy)
cmp_bullet_emitter::cmp_bullet_emitter	components/emitters/cmp_bullet_emitter.h	/^	cmp_bullet_emitter($/;"	p	class:cmp_bullet_emitter	access:public	signature:( uint32_t parent_id, double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy)
cmp_bullet_emitter::deinitialize	components/emitters/cmp_bullet_emitter.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_bullet_emitter	access:public	signature:(game_model& gm)
cmp_bullet_emitter::initialize	components/emitters/cmp_bullet_emitter.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_bullet_emitter	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_bullet_emitter::receive_message	components/emitters/cmp_bullet_emitter.cpp	/^void cmp_bullet_emitter::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_bullet_emitter	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_bullet_emitter::receive_message	components/emitters/cmp_bullet_emitter.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bullet_emitter	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_bullet_emitter::reset_counter	components/emitters/cmp_bullet_emitter.cpp	/^void cmp_bullet_emitter::reset_counter(double rest) {$/;"	f	class:cmp_bullet_emitter	signature:(double rest)
cmp_bullet_emitter::reset_counter	components/emitters/cmp_bullet_emitter.h	/^	void reset_counter(double rest);$/;"	p	class:cmp_bullet_emitter	access:private	signature:(double rest)
cmp_collidable	components/cmp_collidable.cpp	/^cmp_collidable::cmp_collidable($/;"	f	class:cmp_collidable	signature:( uint32_t parent_id, collision_class cc, shared_ptr<shape> shp, collision_space& cs)
cmp_collidable	components/cmp_collidable.h	/^	cmp_collidable($/;"	p	class:cmp_collidable	access:public	signature:( uint32_t parent_id, collision_class cc, shared_ptr<shape> shp, collision_space& cs)
cmp_collidable	components/cmp_collidable.h	/^class cmp_collidable : public component {$/;"	c	inherits:component
cmp_collidable::_class	components/cmp_collidable.h	/^	collision_class _class;$/;"	m	class:cmp_collidable	access:private
cmp_collidable::_cs	components/cmp_collidable.h	/^	collision_space& _cs;$/;"	m	class:cmp_collidable	access:private
cmp_collidable::_reports	components/cmp_collidable.h	/^	vector<coll_report> _reports;$/;"	m	class:cmp_collidable	access:private
cmp_collidable::_shp	components/cmp_collidable.h	/^	shared_ptr<shape> _shp;$/;"	m	class:cmp_collidable	access:private
cmp_collidable::action	components/cmp_collidable.cpp	/^void cmp_collidable::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_collidable	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_collidable::action	components/cmp_collidable.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_collidable	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_collidable::callback	components/cmp_collidable.cpp	/^void cmp_collidable::callback(const coll_report& report) {$/;"	f	class:cmp_collidable	signature:(const coll_report& report)
cmp_collidable::callback	components/cmp_collidable.h	/^	void callback(const coll_report& report);$/;"	p	class:cmp_collidable	access:public	signature:(const coll_report& report)
cmp_collidable::cmp_collidable	components/cmp_collidable.cpp	/^cmp_collidable::cmp_collidable($/;"	f	class:cmp_collidable	signature:( uint32_t parent_id, collision_class cc, shared_ptr<shape> shp, collision_space& cs)
cmp_collidable::cmp_collidable	components/cmp_collidable.h	/^	cmp_collidable($/;"	p	class:cmp_collidable	access:public	signature:( uint32_t parent_id, collision_class cc, shared_ptr<shape> shp, collision_space& cs)
cmp_collidable::deinitialize	components/cmp_collidable.cpp	/^void cmp_collidable::deinitialize(game_model& gm) {$/;"	f	class:cmp_collidable	signature:(game_model& gm)
cmp_collidable::deinitialize	components/cmp_collidable.h	/^	void deinitialize(game_model& gm);$/;"	p	class:cmp_collidable	access:public	signature:(game_model& gm)
cmp_collidable::handle_report	components/cmp_collidable.cpp	/^ent_msg cmp_collidable::handle_report(const coll_report& report) {$/;"	f	class:cmp_collidable	signature:(const coll_report& report)
cmp_collidable::handle_report	components/cmp_collidable.h	/^	ent_msg handle_report(const coll_report& report);$/;"	p	class:cmp_collidable	access:private	signature:(const coll_report& report)
cmp_collidable::initialize	components/cmp_collidable.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_collidable	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_collidable::receive_message	components/cmp_collidable.cpp	/^void cmp_collidable::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_collidable	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_collidable::receive_message	components/cmp_collidable.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_collidable	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_die_end_anim	components/cmp_die_end_anim.cpp	/^cmp_die_end_anim::cmp_die_end_anim(uint32_t parent_id)$/;"	f	class:cmp_die_end_anim	signature:(uint32_t parent_id)
cmp_die_end_anim	components/cmp_die_end_anim.h	/^	cmp_die_end_anim(uint32_t parent_id);$/;"	p	class:cmp_die_end_anim	access:public	signature:(uint32_t parent_id)
cmp_die_end_anim	components/cmp_die_end_anim.h	/^class cmp_die_end_anim : public component {$/;"	c	inherits:component
cmp_die_end_anim::_die	components/cmp_die_end_anim.h	/^	bool _die;$/;"	m	class:cmp_die_end_anim	access:private
cmp_die_end_anim::action	components/cmp_die_end_anim.cpp	/^void cmp_die_end_anim::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_die_end_anim	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_die_end_anim::action	components/cmp_die_end_anim.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_die_end_anim	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_die_end_anim::cmp_die_end_anim	components/cmp_die_end_anim.cpp	/^cmp_die_end_anim::cmp_die_end_anim(uint32_t parent_id)$/;"	f	class:cmp_die_end_anim	signature:(uint32_t parent_id)
cmp_die_end_anim::cmp_die_end_anim	components/cmp_die_end_anim.h	/^	cmp_die_end_anim(uint32_t parent_id);$/;"	p	class:cmp_die_end_anim	access:public	signature:(uint32_t parent_id)
cmp_die_end_anim::deinitialize	components/cmp_die_end_anim.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_die_end_anim	access:public	signature:(game_model& gm)
cmp_die_end_anim::initialize	components/cmp_die_end_anim.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_die_end_anim	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_die_end_anim::receive_message	components/cmp_die_end_anim.cpp	/^void cmp_die_end_anim::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_die_end_anim	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_die_end_anim::receive_message	components/cmp_die_end_anim.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_die_end_anim	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_drop_when_die	components/cmp_drop_when_die.cpp	/^cmp_drop_when_die::cmp_drop_when_die(uint32_t parent_id, drop_t drop_type)$/;"	f	class:cmp_drop_when_die	signature:(uint32_t parent_id, drop_t drop_type)
cmp_drop_when_die	components/cmp_drop_when_die.h	/^	cmp_drop_when_die(uint32_t parent_id, drop_t drop_type);$/;"	p	class:cmp_drop_when_die	access:public	signature:(uint32_t parent_id, drop_t drop_type)
cmp_drop_when_die	components/cmp_drop_when_die.h	/^class cmp_drop_when_die : public component {$/;"	c	inherits:component
cmp_drop_when_die::_dead	components/cmp_drop_when_die.h	/^	bool _dead;$/;"	m	class:cmp_drop_when_die	access:private
cmp_drop_when_die::_drop_type	components/cmp_drop_when_die.h	/^	drop_t _drop_type;$/;"	m	class:cmp_drop_when_die	access:private
cmp_drop_when_die::_last_dx	components/cmp_drop_when_die.h	/^	double _last_dx;$/;"	m	class:cmp_drop_when_die	access:private
cmp_drop_when_die::_last_dy	components/cmp_drop_when_die.h	/^	double _last_dy;$/;"	m	class:cmp_drop_when_die	access:private
cmp_drop_when_die::_last_x	components/cmp_drop_when_die.h	/^	double _last_x;$/;"	m	class:cmp_drop_when_die	access:private
cmp_drop_when_die::_last_y	components/cmp_drop_when_die.h	/^	double _last_y;$/;"	m	class:cmp_drop_when_die	access:private
cmp_drop_when_die::action	components/cmp_drop_when_die.cpp	/^void cmp_drop_when_die::action($/;"	f	class:cmp_drop_when_die	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_drop_when_die::action	components/cmp_drop_when_die.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_drop_when_die	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_drop_when_die::cmp_drop_when_die	components/cmp_drop_when_die.cpp	/^cmp_drop_when_die::cmp_drop_when_die(uint32_t parent_id, drop_t drop_type)$/;"	f	class:cmp_drop_when_die	signature:(uint32_t parent_id, drop_t drop_type)
cmp_drop_when_die::cmp_drop_when_die	components/cmp_drop_when_die.h	/^	cmp_drop_when_die(uint32_t parent_id, drop_t drop_type);$/;"	p	class:cmp_drop_when_die	access:public	signature:(uint32_t parent_id, drop_t drop_type)
cmp_drop_when_die::deinitialize	components/cmp_drop_when_die.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_drop_when_die	access:public	signature:(game_model& gm)
cmp_drop_when_die::initialize	components/cmp_drop_when_die.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_drop_when_die	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_drop_when_die::receive_message	components/cmp_drop_when_die.cpp	/^void cmp_drop_when_die::receive_message($/;"	f	class:cmp_drop_when_die	signature:( const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_drop_when_die::receive_message	components/cmp_drop_when_die.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_drop_when_die	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_explode_when_die	components/cmp_explode_when_die.cpp	/^cmp_explode_when_die::cmp_explode_when_die(uint32_t parent_id, uint32_t num_debris)$/;"	f	class:cmp_explode_when_die	signature:(uint32_t parent_id, uint32_t num_debris)
cmp_explode_when_die	components/cmp_explode_when_die.h	/^	cmp_explode_when_die(uint32_t parent_id, uint32_t num_debris);$/;"	p	class:cmp_explode_when_die	access:public	signature:(uint32_t parent_id, uint32_t num_debris)
cmp_explode_when_die	components/cmp_explode_when_die.h	/^class cmp_explode_when_die : public component {$/;"	c	inherits:component
cmp_explode_when_die::_dead	components/cmp_explode_when_die.h	/^	bool _dead;$/;"	m	class:cmp_explode_when_die	access:private
cmp_explode_when_die::_last_dx	components/cmp_explode_when_die.h	/^	double _last_dx;$/;"	m	class:cmp_explode_when_die	access:private
cmp_explode_when_die::_last_dy	components/cmp_explode_when_die.h	/^	double _last_dy;$/;"	m	class:cmp_explode_when_die	access:private
cmp_explode_when_die::_last_x	components/cmp_explode_when_die.h	/^	double _last_x;$/;"	m	class:cmp_explode_when_die	access:private
cmp_explode_when_die::_last_y	components/cmp_explode_when_die.h	/^	double _last_y;$/;"	m	class:cmp_explode_when_die	access:private
cmp_explode_when_die::_num_debris	components/cmp_explode_when_die.h	/^	uint32_t _num_debris;$/;"	m	class:cmp_explode_when_die	access:private
cmp_explode_when_die::action	components/cmp_explode_when_die.cpp	/^void cmp_explode_when_die::action($/;"	f	class:cmp_explode_when_die	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_explode_when_die::action	components/cmp_explode_when_die.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_explode_when_die	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_explode_when_die::cmp_explode_when_die	components/cmp_explode_when_die.cpp	/^cmp_explode_when_die::cmp_explode_when_die(uint32_t parent_id, uint32_t num_debris)$/;"	f	class:cmp_explode_when_die	signature:(uint32_t parent_id, uint32_t num_debris)
cmp_explode_when_die::cmp_explode_when_die	components/cmp_explode_when_die.h	/^	cmp_explode_when_die(uint32_t parent_id, uint32_t num_debris);$/;"	p	class:cmp_explode_when_die	access:public	signature:(uint32_t parent_id, uint32_t num_debris)
cmp_explode_when_die::deinitialize	components/cmp_explode_when_die.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_explode_when_die	access:public	signature:(game_model& gm)
cmp_explode_when_die::initialize	components/cmp_explode_when_die.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_explode_when_die	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_explode_when_die::receive_message	components/cmp_explode_when_die.cpp	/^void cmp_explode_when_die::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_explode_when_die	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_explode_when_die::receive_message	components/cmp_explode_when_die.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_explode_when_die	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_health_etc	components/wellness/cmp_health_etc.cpp	/^cmp_health_etc::cmp_health_etc(uint32_t parent_id, double health, double armor)$/;"	f	class:cmp_health_etc	signature:(uint32_t parent_id, double health, double armor)
cmp_health_etc	components/wellness/cmp_health_etc.h	/^	cmp_health_etc(uint32_t parent_id, double health, double armor);$/;"	p	class:cmp_health_etc	access:public	signature:(uint32_t parent_id, double health, double armor)
cmp_health_etc	components/wellness/cmp_health_etc.h	/^class cmp_health_etc : public component {$/;"	c	inherits:component
cmp_health_etc::_armor	components/wellness/cmp_health_etc.h	/^	double _armor;$/;"	m	class:cmp_health_etc	access:private
cmp_health_etc::_health	components/wellness/cmp_health_etc.h	/^	double _health;$/;"	m	class:cmp_health_etc	access:private
cmp_health_etc::_max_armor	components/wellness/cmp_health_etc.h	/^	double _max_armor;$/;"	m	class:cmp_health_etc	access:private
cmp_health_etc::_max_health	components/wellness/cmp_health_etc.h	/^	double _max_health;$/;"	m	class:cmp_health_etc	access:private
cmp_health_etc::action	components/wellness/cmp_health_etc.cpp	/^void cmp_health_etc::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_health_etc	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_health_etc::action	components/wellness/cmp_health_etc.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_etc	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_health_etc::cmp_health_etc	components/wellness/cmp_health_etc.cpp	/^cmp_health_etc::cmp_health_etc(uint32_t parent_id, double health, double armor)$/;"	f	class:cmp_health_etc	signature:(uint32_t parent_id, double health, double armor)
cmp_health_etc::cmp_health_etc	components/wellness/cmp_health_etc.h	/^	cmp_health_etc(uint32_t parent_id, double health, double armor);$/;"	p	class:cmp_health_etc	access:public	signature:(uint32_t parent_id, double health, double armor)
cmp_health_etc::deinitialize	components/wellness/cmp_health_etc.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_health_etc	access:public	signature:(game_model& gm)
cmp_health_etc::health_etc_msg	components/wellness/cmp_health_etc.cpp	/^ent_msg cmp_health_etc::health_etc_msg() {$/;"	f	class:cmp_health_etc	signature:()
cmp_health_etc::health_etc_msg	components/wellness/cmp_health_etc.h	/^	ent_msg health_etc_msg();$/;"	p	class:cmp_health_etc	access:private	signature:()
cmp_health_etc::initialize	components/wellness/cmp_health_etc.cpp	/^void cmp_health_etc::initialize(vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_health_etc	signature:(vector<ent_msg>& ent_msgs)
cmp_health_etc::initialize	components/wellness/cmp_health_etc.h	/^	void initialize(vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_etc	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_health_etc::receive_message	components/wellness/cmp_health_etc.cpp	/^void cmp_health_etc::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_health_etc	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_health_etc::receive_message	components/wellness/cmp_health_etc.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_etc	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_health_picker	components/wellness/cmp_health_picker.cpp	/^cmp_health_picker::cmp_health_picker($/;"	f	class:cmp_health_picker	signature:( uint32_t parent_id, double health_boost, double armor_boost)
cmp_health_picker	components/wellness/cmp_health_picker.h	/^	cmp_health_picker(uint32_t parent_id, double health_boost, double armor_boost);$/;"	p	class:cmp_health_picker	access:public	signature:(uint32_t parent_id, double health_boost, double armor_boost)
cmp_health_picker	components/wellness/cmp_health_picker.h	/^class cmp_health_picker : public component {$/;"	c	inherits:component
cmp_health_picker::_armor_boost	components/wellness/cmp_health_picker.h	/^	double _armor_boost;$/;"	m	class:cmp_health_picker	access:private
cmp_health_picker::_collisions	components/wellness/cmp_health_picker.h	/^	vector<collision_class> _collisions;$/;"	m	class:cmp_health_picker	access:private
cmp_health_picker::_health_boost	components/wellness/cmp_health_picker.h	/^	double _health_boost;$/;"	m	class:cmp_health_picker	access:private
cmp_health_picker::action	components/wellness/cmp_health_picker.cpp	/^void cmp_health_picker::action($/;"	f	class:cmp_health_picker	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_health_picker::action	components/wellness/cmp_health_picker.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_picker	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_health_picker::cmp_health_picker	components/wellness/cmp_health_picker.cpp	/^cmp_health_picker::cmp_health_picker($/;"	f	class:cmp_health_picker	signature:( uint32_t parent_id, double health_boost, double armor_boost)
cmp_health_picker::cmp_health_picker	components/wellness/cmp_health_picker.h	/^	cmp_health_picker(uint32_t parent_id, double health_boost, double armor_boost);$/;"	p	class:cmp_health_picker	access:public	signature:(uint32_t parent_id, double health_boost, double armor_boost)
cmp_health_picker::deinitialize	components/wellness/cmp_health_picker.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_health_picker	access:public	signature:(game_model& gm)
cmp_health_picker::initialize	components/wellness/cmp_health_picker.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_health_picker	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_health_picker::receive_message	components/wellness/cmp_health_picker.cpp	/^void cmp_health_picker::receive_message($/;"	f	class:cmp_health_picker	signature:( const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_health_picker::receive_message	components/wellness/cmp_health_picker.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_picker	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_move_const_speed	components/position/cmp_move_const_speed.cpp	/^cmp_move_const_speed::cmp_move_const_speed(uint32_t parent_id, double vx, double vy)$/;"	f	class:cmp_move_const_speed	signature:(uint32_t parent_id, double vx, double vy)
cmp_move_const_speed	components/position/cmp_move_const_speed.h	/^	cmp_move_const_speed(uint32_t parent_id, double vx, double vy);$/;"	p	class:cmp_move_const_speed	access:public	signature:(uint32_t parent_id, double vx, double vy)
cmp_move_const_speed	components/position/cmp_move_const_speed.h	/^class cmp_move_const_speed : public component {$/;"	c	inherits:component
cmp_move_const_speed::_vx	components/position/cmp_move_const_speed.h	/^	double _vx;$/;"	m	class:cmp_move_const_speed	access:private
cmp_move_const_speed::_vy	components/position/cmp_move_const_speed.h	/^	double _vy;$/;"	m	class:cmp_move_const_speed	access:private
cmp_move_const_speed::action	components/position/cmp_move_const_speed.cpp	/^void cmp_move_const_speed::action($/;"	f	class:cmp_move_const_speed	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_move_const_speed::action	components/position/cmp_move_const_speed.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_const_speed	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_move_const_speed::cmp_move_const_speed	components/position/cmp_move_const_speed.cpp	/^cmp_move_const_speed::cmp_move_const_speed(uint32_t parent_id, double vx, double vy)$/;"	f	class:cmp_move_const_speed	signature:(uint32_t parent_id, double vx, double vy)
cmp_move_const_speed::cmp_move_const_speed	components/position/cmp_move_const_speed.h	/^	cmp_move_const_speed(uint32_t parent_id, double vx, double vy);$/;"	p	class:cmp_move_const_speed	access:public	signature:(uint32_t parent_id, double vx, double vy)
cmp_move_const_speed::deinitialize	components/position/cmp_move_const_speed.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_move_const_speed	access:public	signature:(game_model& gm)
cmp_move_const_speed::initialize	components/position/cmp_move_const_speed.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_move_const_speed	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_move_const_speed::receive_message	components/position/cmp_move_const_speed.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_move_const_speed	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_move_path	components/position/cmp_move_path.cpp	/^cmp_move_path::cmp_move_path(uint32_t parent_id, vector<point> points)$/;"	f	class:cmp_move_path	signature:(uint32_t parent_id, vector<point> points)
cmp_move_path	components/position/cmp_move_path.h	/^	cmp_move_path(uint32_t parent_id, vector<point> points);$/;"	p	class:cmp_move_path	access:public	signature:(uint32_t parent_id, vector<point> points)
cmp_move_path	components/position/cmp_move_path.h	/^class cmp_move_path : public component {$/;"	c	inherits:component
cmp_move_path::_done	components/position/cmp_move_path.h	/^	bool _done;$/;"	m	class:cmp_move_path	access:private
cmp_move_path::_last_x	components/position/cmp_move_path.h	/^	double _last_x;$/;"	m	class:cmp_move_path	access:private
cmp_move_path::_last_y	components/position/cmp_move_path.h	/^	double _last_y;$/;"	m	class:cmp_move_path	access:private
cmp_move_path::_next_point	components/position/cmp_move_path.h	/^	uint32_t _next_point;$/;"	m	class:cmp_move_path	access:private
cmp_move_path::_points	components/position/cmp_move_path.h	/^	vector<point> _points;$/;"	m	class:cmp_move_path	access:private
cmp_move_path::action	components/position/cmp_move_path.cpp	/^void cmp_move_path::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_path	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_move_path::action	components/position/cmp_move_path.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_path	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_move_path::cmp_move_path	components/position/cmp_move_path.cpp	/^cmp_move_path::cmp_move_path(uint32_t parent_id, vector<point> points)$/;"	f	class:cmp_move_path	signature:(uint32_t parent_id, vector<point> points)
cmp_move_path::cmp_move_path	components/position/cmp_move_path.h	/^	cmp_move_path(uint32_t parent_id, vector<point> points);$/;"	p	class:cmp_move_path	access:public	signature:(uint32_t parent_id, vector<point> points)
cmp_move_path::deinitialize	components/position/cmp_move_path.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_move_path	access:public	signature:(game_model& gm)
cmp_move_path::draw_debug	components/position/cmp_move_path.cpp	/^void cmp_move_path::draw_debug() {$/;"	f	class:cmp_move_path	signature:()
cmp_move_path::draw_debug	components/position/cmp_move_path.h	/^	void draw_debug();$/;"	p	class:cmp_move_path	access:private	signature:()
cmp_move_path::initialize	components/position/cmp_move_path.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_move_path	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_move_path::perform_move	components/position/cmp_move_path.cpp	/^void cmp_move_path::perform_move(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_path	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_move_path::perform_move	components/position/cmp_move_path.h	/^	void perform_move(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_path	access:private	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_move_path::position_msg	components/position/cmp_move_path.cpp	/^ent_msg cmp_move_path::position_msg(double x, double y) {$/;"	f	class:cmp_move_path	signature:(double x, double y)
cmp_move_path::position_msg	components/position/cmp_move_path.h	/^	ent_msg position_msg(double x, double y);$/;"	p	class:cmp_move_path	access:private	signature:(double x, double y)
cmp_move_path::receive_message	components/position/cmp_move_path.cpp	/^void cmp_move_path::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_path	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_move_path::receive_message	components/position/cmp_move_path.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_path	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_move_player	components/position/cmp_move_player.cpp	/^cmp_move_player::cmp_move_player(uint32_t parent_id)$/;"	f	class:cmp_move_player	signature:(uint32_t parent_id)
cmp_move_player	components/position/cmp_move_player.h	/^	cmp_move_player(uint32_t parent_id);$/;"	p	class:cmp_move_player	access:public	signature:(uint32_t parent_id)
cmp_move_player	components/position/cmp_move_player.h	/^class cmp_move_player : public component {$/;"	c	inherits:component
cmp_move_player::_last_x	components/position/cmp_move_player.h	/^	double _last_x;$/;"	m	class:cmp_move_player	access:private
cmp_move_player::_last_y	components/position/cmp_move_player.h	/^	double _last_y;$/;"	m	class:cmp_move_player	access:private
cmp_move_player::action	components/position/cmp_move_player.cpp	/^void cmp_move_player::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_player	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_move_player::action	components/position/cmp_move_player.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_player	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_move_player::cmp_move_player	components/position/cmp_move_player.cpp	/^cmp_move_player::cmp_move_player(uint32_t parent_id)$/;"	f	class:cmp_move_player	signature:(uint32_t parent_id)
cmp_move_player::cmp_move_player	components/position/cmp_move_player.h	/^	cmp_move_player(uint32_t parent_id);$/;"	p	class:cmp_move_player	access:public	signature:(uint32_t parent_id)
cmp_move_player::deinitialize	components/position/cmp_move_player.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_move_player	access:public	signature:(game_model& gm)
cmp_move_player::initialize	components/position/cmp_move_player.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_move_player	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_move_player::receive_message	components/position/cmp_move_player.cpp	/^void cmp_move_player::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_player	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_move_player::receive_message	components/position/cmp_move_player.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_player	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_orientation	components/position/cmp_orientation.cpp	/^cmp_orientation::cmp_orientation($/;"	f	class:cmp_orientation	signature:( uint32_t parent_id, double x, double y, double theta)
cmp_orientation	components/position/cmp_orientation.h	/^	cmp_orientation(uint32_t parent_id, double x, double y, double theta);$/;"	p	class:cmp_orientation	access:public	signature:(uint32_t parent_id, double x, double y, double theta)
cmp_orientation	components/position/cmp_orientation.h	/^class cmp_orientation : public component {$/;"	c	inherits:component
cmp_orientation::_prev_x	components/position/cmp_orientation.h	/^	double _prev_x;$/;"	m	class:cmp_orientation	access:private
cmp_orientation::_prev_y	components/position/cmp_orientation.h	/^	double _prev_y;$/;"	m	class:cmp_orientation	access:private
cmp_orientation::_theta	components/position/cmp_orientation.h	/^	double _theta;$/;"	m	class:cmp_orientation	access:private
cmp_orientation::_x	components/position/cmp_orientation.h	/^	double _x;$/;"	m	class:cmp_orientation	access:private
cmp_orientation::_y	components/position/cmp_orientation.h	/^	double _y;$/;"	m	class:cmp_orientation	access:private
cmp_orientation::action	components/position/cmp_orientation.cpp	/^void cmp_orientation::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_orientation	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_orientation::action	components/position/cmp_orientation.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_orientation	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_orientation::cmp_orientation	components/position/cmp_orientation.cpp	/^cmp_orientation::cmp_orientation($/;"	f	class:cmp_orientation	signature:( uint32_t parent_id, double x, double y, double theta)
cmp_orientation::cmp_orientation	components/position/cmp_orientation.h	/^	cmp_orientation(uint32_t parent_id, double x, double y, double theta);$/;"	p	class:cmp_orientation	access:public	signature:(uint32_t parent_id, double x, double y, double theta)
cmp_orientation::deinitialize	components/position/cmp_orientation.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_orientation	access:public	signature:(game_model& gm)
cmp_orientation::initialize	components/position/cmp_orientation.cpp	/^void cmp_orientation::initialize(vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_orientation	signature:(vector<ent_msg>& ent_msgs)
cmp_orientation::initialize	components/position/cmp_orientation.h	/^	void initialize(vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_orientation	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_orientation::orientation_msg	components/position/cmp_orientation.cpp	/^ent_msg cmp_orientation::orientation_msg() {$/;"	f	class:cmp_orientation	signature:()
cmp_orientation::orientation_msg	components/position/cmp_orientation.h	/^	ent_msg orientation_msg();$/;"	p	class:cmp_orientation	access:private	signature:()
cmp_orientation::receive_message	components/position/cmp_orientation.cpp	/^void cmp_orientation::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_orientation	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_orientation::receive_message	components/position/cmp_orientation.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_orientation	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_painmap	components/wellness/cmp_painmap.cpp	/^cmp_painmap::cmp_painmap(uint32_t parent_id, map<collision_class, double> pain_map)$/;"	f	class:cmp_painmap	signature:(uint32_t parent_id, map<collision_class, double> pain_map)
cmp_painmap	components/wellness/cmp_painmap.h	/^	cmp_painmap(uint32_t parent_id, map<collision_class, double> pain_map);$/;"	p	class:cmp_painmap	access:public	signature:(uint32_t parent_id, map<collision_class, double> pain_map)
cmp_painmap	components/wellness/cmp_painmap.h	/^class cmp_painmap : public component {$/;"	c	inherits:component
cmp_painmap::_collisions	components/wellness/cmp_painmap.h	/^	vector<collision_class> _collisions;$/;"	m	class:cmp_painmap	access:private
cmp_painmap::_pain_map	components/wellness/cmp_painmap.h	/^	map<collision_class, double> _pain_map;$/;"	m	class:cmp_painmap	access:private
cmp_painmap::action	components/wellness/cmp_painmap.cpp	/^void cmp_painmap::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_painmap	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_painmap::action	components/wellness/cmp_painmap.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_painmap	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_painmap::cmp_painmap	components/wellness/cmp_painmap.cpp	/^cmp_painmap::cmp_painmap(uint32_t parent_id, map<collision_class, double> pain_map)$/;"	f	class:cmp_painmap	signature:(uint32_t parent_id, map<collision_class, double> pain_map)
cmp_painmap::cmp_painmap	components/wellness/cmp_painmap.h	/^	cmp_painmap(uint32_t parent_id, map<collision_class, double> pain_map);$/;"	p	class:cmp_painmap	access:public	signature:(uint32_t parent_id, map<collision_class, double> pain_map)
cmp_painmap::deinitialize	components/wellness/cmp_painmap.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_painmap	access:public	signature:(game_model& gm)
cmp_painmap::initialize	components/wellness/cmp_painmap.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_painmap	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_painmap::receive_message	components/wellness/cmp_painmap.cpp	/^void cmp_painmap::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_painmap	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_painmap::receive_message	components/wellness/cmp_painmap.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_painmap	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_player_health	components/wellness/cmp_player_health.cpp	/^cmp_player_health::cmp_player_health(uint32_t parent_id)$/;"	f	class:cmp_player_health	signature:(uint32_t parent_id)
cmp_player_health	components/wellness/cmp_player_health.h	/^	cmp_player_health(uint32_t parent_id);$/;"	p	class:cmp_player_health	access:public	signature:(uint32_t parent_id)
cmp_player_health	components/wellness/cmp_player_health.h	/^class cmp_player_health : public component {$/;"	c	inherits:component
cmp_player_health::_last_armor	components/wellness/cmp_player_health.h	/^	double _last_armor;$/;"	m	class:cmp_player_health	access:private
cmp_player_health::_last_health	components/wellness/cmp_player_health.h	/^	double _last_health;$/;"	m	class:cmp_player_health	access:private
cmp_player_health::action	components/wellness/cmp_player_health.cpp	/^void cmp_player_health::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_player_health	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_player_health::action	components/wellness/cmp_player_health.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_player_health	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_player_health::cmp_player_health	components/wellness/cmp_player_health.cpp	/^cmp_player_health::cmp_player_health(uint32_t parent_id)$/;"	f	class:cmp_player_health	signature:(uint32_t parent_id)
cmp_player_health::cmp_player_health	components/wellness/cmp_player_health.h	/^	cmp_player_health(uint32_t parent_id);$/;"	p	class:cmp_player_health	access:public	signature:(uint32_t parent_id)
cmp_player_health::deinitialize	components/wellness/cmp_player_health.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_player_health	access:public	signature:(game_model& gm)
cmp_player_health::initialize	components/wellness/cmp_player_health.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_player_health	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_player_health::receive_message	components/wellness/cmp_player_health.cpp	/^void cmp_player_health::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_player_health	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_player_health::receive_message	components/wellness/cmp_player_health.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_player_health	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_rotate_const_speed	components/position/cmp_rotate_const_speed.cpp	/^cmp_rotate_const_speed::cmp_rotate_const_speed(uint32_t parent_id, double omega)$/;"	f	class:cmp_rotate_const_speed	signature:(uint32_t parent_id, double omega)
cmp_rotate_const_speed	components/position/cmp_rotate_const_speed.h	/^	cmp_rotate_const_speed(uint32_t parent_id, double omega);$/;"	p	class:cmp_rotate_const_speed	access:public	signature:(uint32_t parent_id, double omega)
cmp_rotate_const_speed	components/position/cmp_rotate_const_speed.h	/^class cmp_rotate_const_speed : public component {$/;"	c	inherits:component
cmp_rotate_const_speed::_omega	components/position/cmp_rotate_const_speed.h	/^	double _omega;$/;"	m	class:cmp_rotate_const_speed	access:private
cmp_rotate_const_speed::action	components/position/cmp_rotate_const_speed.cpp	/^void cmp_rotate_const_speed::action($/;"	f	class:cmp_rotate_const_speed	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_rotate_const_speed::action	components/position/cmp_rotate_const_speed.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_rotate_const_speed	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_rotate_const_speed::cmp_rotate_const_speed	components/position/cmp_rotate_const_speed.cpp	/^cmp_rotate_const_speed::cmp_rotate_const_speed(uint32_t parent_id, double omega)$/;"	f	class:cmp_rotate_const_speed	signature:(uint32_t parent_id, double omega)
cmp_rotate_const_speed::cmp_rotate_const_speed	components/position/cmp_rotate_const_speed.h	/^	cmp_rotate_const_speed(uint32_t parent_id, double omega);$/;"	p	class:cmp_rotate_const_speed	access:public	signature:(uint32_t parent_id, double omega)
cmp_rotate_const_speed::deinitialize	components/position/cmp_rotate_const_speed.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_rotate_const_speed	access:public	signature:(game_model& gm)
cmp_rotate_const_speed::initialize	components/position/cmp_rotate_const_speed.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_rotate_const_speed	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_rotate_const_speed::receive_message	components/position/cmp_rotate_const_speed.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_rotate_const_speed	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_score_when_die	components/cmp_score_when_die.cpp	/^cmp_score_when_die::cmp_score_when_die(uint32_t parent_id, double score)$/;"	f	class:cmp_score_when_die	signature:(uint32_t parent_id, double score)
cmp_score_when_die	components/cmp_score_when_die.h	/^	cmp_score_when_die(uint32_t parent_id, double score);$/;"	p	class:cmp_score_when_die	access:public	signature:(uint32_t parent_id, double score)
cmp_score_when_die	components/cmp_score_when_die.h	/^class cmp_score_when_die : public component {$/;"	c	inherits:component
cmp_score_when_die::_dead	components/cmp_score_when_die.h	/^	bool _dead;$/;"	m	class:cmp_score_when_die	access:private
cmp_score_when_die::_score	components/cmp_score_when_die.h	/^	double _score;$/;"	m	class:cmp_score_when_die	access:private
cmp_score_when_die::action	components/cmp_score_when_die.cpp	/^void cmp_score_when_die::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_score_when_die	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_score_when_die::action	components/cmp_score_when_die.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_score_when_die	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_score_when_die::cmp_score_when_die	components/cmp_score_when_die.cpp	/^cmp_score_when_die::cmp_score_when_die(uint32_t parent_id, double score)$/;"	f	class:cmp_score_when_die	signature:(uint32_t parent_id, double score)
cmp_score_when_die::cmp_score_when_die	components/cmp_score_when_die.h	/^	cmp_score_when_die(uint32_t parent_id, double score);$/;"	p	class:cmp_score_when_die	access:public	signature:(uint32_t parent_id, double score)
cmp_score_when_die::deinitialize	components/cmp_score_when_die.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_score_when_die	access:public	signature:(game_model& gm)
cmp_score_when_die::initialize	components/cmp_score_when_die.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_score_when_die	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_score_when_die::receive_message	components/cmp_score_when_die.cpp	/^void cmp_score_when_die::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_score_when_die	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_score_when_die::receive_message	components/cmp_score_when_die.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_score_when_die	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_shoot_player	components/cmp_shoot_player.cpp	/^cmp_shoot_player::cmp_shoot_player(uint32_t parent_id, double period, double max_x_dev)$/;"	f	class:cmp_shoot_player	signature:(uint32_t parent_id, double period, double max_x_dev)
cmp_shoot_player	components/cmp_shoot_player.h	/^	cmp_shoot_player(uint32_t parent_id, double period, double max_x_dev);$/;"	p	class:cmp_shoot_player	access:public	signature:(uint32_t parent_id, double period, double max_x_dev)
cmp_shoot_player	components/cmp_shoot_player.h	/^class cmp_shoot_player : public component {$/;"	c	inherits:component
cmp_shoot_player::_accumulator	components/cmp_shoot_player.h	/^	double _accumulator;$/;"	m	class:cmp_shoot_player	access:private
cmp_shoot_player::_engine	components/cmp_shoot_player.h	/^	default_random_engine _engine;$/;"	m	class:cmp_shoot_player	access:private
cmp_shoot_player::_last_x	components/cmp_shoot_player.h	/^	double _last_x;$/;"	m	class:cmp_shoot_player	access:private
cmp_shoot_player::_last_y	components/cmp_shoot_player.h	/^	double _last_y;$/;"	m	class:cmp_shoot_player	access:private
cmp_shoot_player::_max_x_dev	components/cmp_shoot_player.h	/^	double _max_x_dev;$/;"	m	class:cmp_shoot_player	access:private
cmp_shoot_player::_period	components/cmp_shoot_player.h	/^	double _period;$/;"	m	class:cmp_shoot_player	access:private
cmp_shoot_player::_previous_left	components/cmp_shoot_player.h	/^	bool _previous_left;$/;"	m	class:cmp_shoot_player	access:private
cmp_shoot_player::action	components/cmp_shoot_player.cpp	/^void cmp_shoot_player::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_shoot_player	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_shoot_player::action	components/cmp_shoot_player.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_shoot_player	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_shoot_player::cmp_shoot_player	components/cmp_shoot_player.cpp	/^cmp_shoot_player::cmp_shoot_player(uint32_t parent_id, double period, double max_x_dev)$/;"	f	class:cmp_shoot_player	signature:(uint32_t parent_id, double period, double max_x_dev)
cmp_shoot_player::cmp_shoot_player	components/cmp_shoot_player.h	/^	cmp_shoot_player(uint32_t parent_id, double period, double max_x_dev);$/;"	p	class:cmp_shoot_player	access:public	signature:(uint32_t parent_id, double period, double max_x_dev)
cmp_shoot_player::deinitialize	components/cmp_shoot_player.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_shoot_player	access:public	signature:(game_model& gm)
cmp_shoot_player::initialize	components/cmp_shoot_player.cpp	/^void cmp_shoot_player::initialize(vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_shoot_player	signature:(vector<ent_msg>& ent_msgs)
cmp_shoot_player::initialize	components/cmp_shoot_player.h	/^	void initialize(vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_shoot_player	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_shoot_player::receive_message	components/cmp_shoot_player.cpp	/^void cmp_shoot_player::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_shoot_player	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_shoot_player::receive_message	components/cmp_shoot_player.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_shoot_player	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_smoke_when_hurt	components/wellness/cmp_smoke_when_hurt.cpp	/^cmp_smoke_when_hurt::cmp_smoke_when_hurt(uint32_t parent_id)$/;"	f	class:cmp_smoke_when_hurt	signature:(uint32_t parent_id)
cmp_smoke_when_hurt	components/wellness/cmp_smoke_when_hurt.h	/^	cmp_smoke_when_hurt(uint32_t parent_id);$/;"	p	class:cmp_smoke_when_hurt	access:public	signature:(uint32_t parent_id)
cmp_smoke_when_hurt	components/wellness/cmp_smoke_when_hurt.h	/^class cmp_smoke_when_hurt : public component {$/;"	c	inherits:component
cmp_smoke_when_hurt::_counter	components/wellness/cmp_smoke_when_hurt.h	/^	double _counter;$/;"	m	class:cmp_smoke_when_hurt	access:private
cmp_smoke_when_hurt::_engine	components/wellness/cmp_smoke_when_hurt.h	/^	default_random_engine _engine;$/;"	m	class:cmp_smoke_when_hurt	access:private
cmp_smoke_when_hurt::_last_health	components/wellness/cmp_smoke_when_hurt.h	/^	double _last_health;$/;"	m	class:cmp_smoke_when_hurt	access:private
cmp_smoke_when_hurt::_last_x	components/wellness/cmp_smoke_when_hurt.h	/^	double _last_x;$/;"	m	class:cmp_smoke_when_hurt	access:private
cmp_smoke_when_hurt::_last_y	components/wellness/cmp_smoke_when_hurt.h	/^	double _last_y;$/;"	m	class:cmp_smoke_when_hurt	access:private
cmp_smoke_when_hurt::_max_health	components/wellness/cmp_smoke_when_hurt.h	/^	double _max_health;$/;"	m	class:cmp_smoke_when_hurt	access:private
cmp_smoke_when_hurt::action	components/wellness/cmp_smoke_when_hurt.cpp	/^void cmp_smoke_when_hurt::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_smoke_when_hurt	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_smoke_when_hurt::action	components/wellness/cmp_smoke_when_hurt.h	/^	void action(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_smoke_when_hurt	access:public	signature:(const config& cfg, game_model& gs, vector<ent_msg>& ent_msgs)
cmp_smoke_when_hurt::cmp_smoke_when_hurt	components/wellness/cmp_smoke_when_hurt.cpp	/^cmp_smoke_when_hurt::cmp_smoke_when_hurt(uint32_t parent_id)$/;"	f	class:cmp_smoke_when_hurt	signature:(uint32_t parent_id)
cmp_smoke_when_hurt::cmp_smoke_when_hurt	components/wellness/cmp_smoke_when_hurt.h	/^	cmp_smoke_when_hurt(uint32_t parent_id);$/;"	p	class:cmp_smoke_when_hurt	access:public	signature:(uint32_t parent_id)
cmp_smoke_when_hurt::deinitialize	components/wellness/cmp_smoke_when_hurt.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_smoke_when_hurt	access:public	signature:(game_model& gm)
cmp_smoke_when_hurt::initialize	components/wellness/cmp_smoke_when_hurt.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_smoke_when_hurt	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_smoke_when_hurt::receive_message	components/wellness/cmp_smoke_when_hurt.cpp	/^void cmp_smoke_when_hurt::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_smoke_when_hurt	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_smoke_when_hurt::receive_message	components/wellness/cmp_smoke_when_hurt.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_smoke_when_hurt	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
cmp_smoke_when_hurt::reset_counter	components/wellness/cmp_smoke_when_hurt.cpp	/^void cmp_smoke_when_hurt::reset_counter(double rest) {$/;"	f	class:cmp_smoke_when_hurt	signature:(double rest)
cmp_smoke_when_hurt::reset_counter	components/wellness/cmp_smoke_when_hurt.h	/^	void reset_counter(double rest);$/;"	p	class:cmp_smoke_when_hurt	access:private	signature:(double rest)
cmp_time_to_live	components/cmp_time_to_live.cpp	/^cmp_time_to_live::cmp_time_to_live(uint32_t parent_id, double ttl)$/;"	f	class:cmp_time_to_live	signature:(uint32_t parent_id, double ttl)
cmp_time_to_live	components/cmp_time_to_live.h	/^	cmp_time_to_live(uint32_t parent_id, double ttl);$/;"	p	class:cmp_time_to_live	access:public	signature:(uint32_t parent_id, double ttl)
cmp_time_to_live	components/cmp_time_to_live.h	/^class cmp_time_to_live : public component {$/;"	c	inherits:component
cmp_time_to_live::_ttl	components/cmp_time_to_live.h	/^	double _ttl;$/;"	m	class:cmp_time_to_live	access:private
cmp_time_to_live::action	components/cmp_time_to_live.cpp	/^void cmp_time_to_live::action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_time_to_live	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_time_to_live::action	components/cmp_time_to_live.h	/^	void action(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_time_to_live	access:public	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
cmp_time_to_live::cmp_time_to_live	components/cmp_time_to_live.cpp	/^cmp_time_to_live::cmp_time_to_live(uint32_t parent_id, double ttl)$/;"	f	class:cmp_time_to_live	signature:(uint32_t parent_id, double ttl)
cmp_time_to_live::cmp_time_to_live	components/cmp_time_to_live.h	/^	cmp_time_to_live(uint32_t parent_id, double ttl);$/;"	p	class:cmp_time_to_live	access:public	signature:(uint32_t parent_id, double ttl)
cmp_time_to_live::deinitialize	components/cmp_time_to_live.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_time_to_live	access:public	signature:(game_model& gm)
cmp_time_to_live::initialize	components/cmp_time_to_live.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_time_to_live	access:public	signature:(vector<ent_msg>& ent_msgs)
cmp_time_to_live::receive_message	components/cmp_time_to_live.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_time_to_live	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
coll_entry	collision/collision_space.h	/^	coll_entry(collision_class cc, shared_ptr<shape> shape, function<void(const coll_report&)> callback)$/;"	f	struct:coll_entry	access:public	signature:(collision_class cc, shared_ptr<shape> shape, function<void(const coll_report&)> callback)
coll_entry	collision/collision_space.h	/^struct coll_entry {$/;"	s
coll_entry::callback	collision/collision_space.h	/^	function<void(const coll_report&)> callback;$/;"	m	struct:coll_entry	access:public
coll_entry::cc	collision/collision_space.h	/^	collision_class cc;$/;"	m	struct:coll_entry	access:public
coll_entry::coll_entry	collision/collision_space.h	/^	coll_entry(collision_class cc, shared_ptr<shape> shape, function<void(const coll_report&)> callback)$/;"	f	struct:coll_entry	access:public	signature:(collision_class cc, shared_ptr<shape> shape, function<void(const coll_report&)> callback)
coll_entry::shp	collision/collision_space.h	/^	shared_ptr<shape> shp;$/;"	m	struct:coll_entry	access:public
coll_report	collision/collision_space.h	/^struct coll_report {$/;"	s
coll_report::class_a	collision/collision_space.h	/^	collision_class class_a;$/;"	m	struct:coll_report	access:public
coll_report::class_b	collision/collision_space.h	/^	collision_class class_b;$/;"	m	struct:coll_report	access:public
coll_report::shape_a	collision/collision_space.h	/^	shared_ptr<shape> shape_a;$/;"	m	struct:coll_report	access:public
coll_report::shape_b	collision/collision_space.h	/^	shared_ptr<shape> shape_b;$/;"	m	struct:coll_report	access:public
collide_circle_circle	collision/collisions.cpp	/^bool collide_circle_circle(const circle& a, const circle& b) {$/;"	f	signature:(const circle& a, const circle& b)
collide_circle_circle	collision/collisions.h	/^bool collide_circle_circle(const circle& a, const circle& b);$/;"	p	signature:(const circle& a, const circle& b)
collide_with	collision/circle.cpp	/^bool circle::collide_with(const shape& s) const {$/;"	f	class:circle	signature:(const shape& s) const
collide_with	collision/circle.h	/^	bool collide_with(const shape& s) const;$/;"	p	class:circle	access:public	signature:(const shape& s) const
collide_with	collision/shape.h	/^	virtual bool collide_with(const shape& s) const = 0;$/;"	p	class:shape	access:public	signature:(const shape& s) const
collide_with_circle	collision/circle.cpp	/^bool circle::collide_with_circle(const circle& c) const {$/;"	f	class:circle	signature:(const circle& c) const
collide_with_circle	collision/circle.h	/^	bool collide_with_circle(const circle& c) const;$/;"	p	class:circle	access:public	signature:(const circle& c) const
collide_with_circle	collision/shape.h	/^	virtual bool collide_with_circle(const circle& c) const = 0;$/;"	p	class:shape	access:public	signature:(const circle& c) const
collision	components/component.h	/^	} collision;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon3	access:public
collision_class	collision/collision_space.h	/^enum class collision_class : uint32_t {$/;"	c	inherits:uint32_t
collision_class::ARMOR_PICKUP	collision/collision_space.h	/^	ARMOR_PICKUP,$/;"	m	class:collision_class	access:private
collision_class::ENEMY_BULLET	collision/collision_space.h	/^	ENEMY_BULLET,$/;"	m	class:collision_class	access:private
collision_class::ENEMY_SHIP	collision/collision_space.h	/^	ENEMY_SHIP,$/;"	m	class:collision_class	access:private
collision_class::HEALTH_PICKUP	collision/collision_space.h	/^	HEALTH_PICKUP,$/;"	m	class:collision_class	access:private
collision_class::PLAYER_BULLET	collision/collision_space.h	/^	PLAYER_BULLET,$/;"	m	class:collision_class	access:private
collision_class::PLAYER_SHIP	collision/collision_space.h	/^	PLAYER_SHIP,$/;"	m	class:collision_class	access:private
collision_space	collision/collision_space.h	/^class collision_space {$/;"	c
collision_space::_collision_entries	collision/collision_space.h	/^	vector<coll_entry> _collision_entries;$/;"	m	class:collision_space	access:private
collision_space::check_collisions	collision/collision_space.cpp	/^void collision_space::check_collisions() {$/;"	f	class:collision_space	signature:()
collision_space::check_collisions	collision/collision_space.h	/^	void check_collisions();$/;"	p	class:collision_space	access:public	signature:()
collision_space::register_shape	collision/collision_space.cpp	/^void collision_space::register_shape(collision_class cc, shared_ptr<shape> shp, function<void(const coll_report&)> cb) {$/;"	f	class:collision_space	signature:(collision_class cc, shared_ptr<shape> shp, function<void(const coll_report&)> cb)
collision_space::register_shape	collision/collision_space.h	/^	void register_shape(collision_class cc, shared_ptr<shape> shp, function<void(const coll_report&)> cb);$/;"	p	class:collision_space	access:public	signature:(collision_class cc, shared_ptr<shape> shp, function<void(const coll_report&)> cb)
collision_space::remove_entry_by_shape_id	collision/collision_space.cpp	/^void collision_space::remove_entry_by_shape_id(uint32_t id) {$/;"	f	class:collision_space	signature:(uint32_t id)
collision_space::remove_entry_by_shape_id	collision/collision_space.h	/^	void remove_entry_by_shape_id(uint32_t id);$/;"	p	class:collision_space	access:public	signature:(uint32_t id)
component	components/component.h	/^	component(uint32_t parent_id)$/;"	f	class:component	access:public	signature:(uint32_t parent_id)
component	components/component.h	/^class component {$/;"	c
component::_parent_id	components/component.h	/^	uint32_t _parent_id;$/;"	m	class:component	access:protected
component::action	components/component.h	/^	virtual void action($/;"	p	class:component	access:public	signature:( const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
component::component	components/component.h	/^	component(uint32_t parent_id)$/;"	f	class:component	access:public	signature:(uint32_t parent_id)
component::deinitialize	components/component.h	/^	virtual void deinitialize(game_model& gm) = 0;$/;"	p	class:component	access:public	signature:(game_model& gm)
component::initialize	components/component.h	/^	virtual void initialize(vector<ent_msg>& ent_msgs) = 0;$/;"	p	class:component	access:public	signature:(vector<ent_msg>& ent_msgs)
component::receive_message	components/component.h	/^	virtual void receive_message($/;"	p	class:component	access:public	signature:( const ent_msg& msg, vector<ent_msg>& ent_msgs)
component::~component	components/component.h	/^	virtual ~component() {}$/;"	f	class:component	access:public	signature:()
config	config.h	/^class config {$/;"	c
config::get_eye_bullet_v	config.h	/^	double get_eye_bullet_v() const {$/;"	f	class:config	access:public	signature:() const
config::get_eye_v	config.h	/^	double get_eye_v() const {$/;"	f	class:config	access:public	signature:() const
config::get_fps	config.h	/^	double get_fps() const {$/;"	f	class:config	access:public	signature:() const
config::get_near_star_v	config.h	/^	double get_near_star_v() const {$/;"	f	class:config	access:public	signature:() const
config::get_player_bullet_v	config.h	/^	double get_player_bullet_v() const {$/;"	f	class:config	access:public	signature:() const
config::get_player_max_armor	config.h	/^	double get_player_max_armor() const {$/;"	f	class:config	access:public	signature:() const
config::get_player_max_health	config.h	/^	double get_player_max_health() const {$/;"	f	class:config	access:public	signature:() const
config::get_player_vx	config.h	/^	double get_player_vx() const {$/;"	f	class:config	access:public	signature:() const
config::get_player_vy	config.h	/^	double get_player_vy() const {$/;"	f	class:config	access:public	signature:() const
config::get_screen_h	config.h	/^	double get_screen_h() const {$/;"	f	class:config	access:public	signature:() const
config::get_screen_w	config.h	/^	double get_screen_w() const {$/;"	f	class:config	access:public	signature:() const
config::get_shoot_period	config.h	/^	double get_shoot_period() const {$/;"	f	class:config	access:public	signature:() const
create_bullet	entities/entity_factory.cpp	/^entity entity_factory::create_bullet($/;"	f	class:entity_factory	signature:( double x, double y, double vx, double vy, double screen_w, double screen_h, res_id image_id, collision_space& coll_sp, collision_class coll_class)
create_bullet	entities/entity_factory.h	/^	entity create_bullet(double x, double y, double vx, double vy, double screen_w, double screen_h, res_id image_id, collision_space& coll_sp, collision_class coll_class);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double vx, double vy, double screen_w, double screen_h, res_id image_id, collision_space& coll_sp, collision_class coll_class)
create_debris	entities/entity_factory.cpp	/^entity entity_factory::create_debris(double x, double y, double vx, double vy) {$/;"	f	class:entity_factory	signature:(double x, double y, double vx, double vy)
create_debris	entities/entity_factory.h	/^	entity create_debris(double x, double y, double vx, double vy);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double vx, double vy)
create_enemy_eye	entities/entity_factory.cpp	/^entity entity_factory::create_enemy_eye($/;"	f	class:entity_factory	signature:( double screen_w, double screen_h, collision_space& coll_sp)
create_enemy_eye	entities/entity_factory.h	/^	entity create_enemy_eye(double screen_w, double screen_h, collision_space& coll_sp);$/;"	p	class:entity_factory	access:public	signature:(double screen_w, double screen_h, collision_space& coll_sp)
create_explosion	entities/entity_factory.cpp	/^entity entity_factory::create_explosion(double x, double y, double vx, double vy) {$/;"	f	class:entity_factory	signature:(double x, double y, double vx, double vy)
create_explosion	entities/entity_factory.h	/^	entity create_explosion(double x, double y, double vx, double vy);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double vx, double vy)
create_game_state	game_state.cpp	/^unique_ptr<state> create_game_state(const config& config, const resman& res) {$/;"	f	signature:(const config& config, const resman& res)
create_game_state	state.h	/^unique_ptr<state> create_game_state(const config& config, const resman& res);$/;"	p	signature:(const config& config, const resman& res)
create_health_pickup	entities/entity_factory.cpp	/^entity entity_factory::create_health_pickup($/;"	f	class:entity_factory	signature:( double x, double y, double vx, double vy, double screen_w, double screen_h, collision_space& coll_sp)
create_health_pickup	entities/entity_factory.h	/^	entity create_health_pickup(double x, double y, double vx, double vy, double screen_w, double screen_h, collision_space& coll_sp);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double vx, double vy, double screen_w, double screen_h, collision_space& coll_sp)
create_player_ship	entities/entity_factory.cpp	/^entity entity_factory::create_player_ship($/;"	f	class:entity_factory	signature:( double x, double y, double screen_w, double screen_h, double theta, double shoot_period, double health, double armor, collision_space& coll_sp)
create_player_ship	entities/entity_factory.h	/^	entity create_player_ship(double x, double y, double screen_w, double screen_h, double theta, double shoot_period, double health, double armor, collision_space& coll_sp);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double screen_w, double screen_h, double theta, double shoot_period, double health, double armor, collision_space& coll_sp)
create_remove_entity	game_model.h	/^	static game_msg create_remove_entity(uint32_t id) {$/;"	f	struct:game_msg	access:public	signature:(uint32_t id)
create_smoke	entities/entity_factory.cpp	/^entity entity_factory::create_smoke(double x, double y) {$/;"	f	class:entity_factory	signature:(double x, double y)
create_smoke	entities/entity_factory.h	/^	entity create_smoke(double x, double y);$/;"	p	class:entity_factory	access:public	signature:(double x, double y)
create_spawn_bullets	game_model.h	/^	static game_msg create_spawn_bullets($/;"	f	struct:game_msg	access:public	signature:( double x, double y, double vx, double vy, res_id bitmap_id, bool is_enemy)
create_spawn_expl	game_model.h	/^	static game_msg create_spawn_expl($/;"	f	struct:game_msg	access:public	signature:( uint32_t num_debris, double x, double y, double vx, double vy)
create_spawn_health	game_model.h	/^	static game_msg create_spawn_health($/;"	f	struct:game_msg	access:public	signature:( double x, double y, double vx, double vy)
create_spawn_smoke	game_model.h	/^	static game_msg create_spawn_smoke(double x, double y) {$/;"	f	struct:game_msg	access:public	signature:(double x, double y)
create_star	entities/entity_factory.cpp	/^entity entity_factory::create_star(double x, double y, double near_v, double zdist, double screen_w, double screen_h) {$/;"	f	class:entity_factory	signature:(double x, double y, double near_v, double zdist, double screen_w, double screen_h)
create_star	entities/entity_factory.h	/^	entity create_star(double x, double y, double near_v, double zdist, double screen_w, double screen_h);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double near_v, double zdist, double screen_w, double screen_h)
debug	game_model.h	/^	bool debug;$/;"	m	struct:game_model	access:public
deinitialize	components/appearance/cmp_appr_bitmap.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_appr_bitmap	access:public	signature:(game_model& gm)
deinitialize	components/appearance/cmp_appr_pixel.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_appr_pixel	access:public	signature:(game_model& gm)
deinitialize	components/appearance/cmp_appr_simple_anim.cpp	/^void cmp_appr_simple_anim::deinitialize(game_model& gm) {$/;"	f	class:cmp_appr_simple_anim	signature:(game_model& gm)
deinitialize	components/appearance/cmp_appr_simple_anim.h	/^	void deinitialize(game_model& gm);$/;"	p	class:cmp_appr_simple_anim	access:public	signature:(game_model& gm)
deinitialize	components/bounds/cmp_bounded_life.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_bounded_life	access:public	signature:(game_model& gm)
deinitialize	components/bounds/cmp_bounded_movement.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_bounded_movement	access:public	signature:(game_model& gm)
deinitialize	components/cmp_collidable.cpp	/^void cmp_collidable::deinitialize(game_model& gm) {$/;"	f	class:cmp_collidable	signature:(game_model& gm)
deinitialize	components/cmp_collidable.h	/^	void deinitialize(game_model& gm);$/;"	p	class:cmp_collidable	access:public	signature:(game_model& gm)
deinitialize	components/cmp_die_end_anim.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_die_end_anim	access:public	signature:(game_model& gm)
deinitialize	components/cmp_drop_when_die.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_drop_when_die	access:public	signature:(game_model& gm)
deinitialize	components/cmp_explode_when_die.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_explode_when_die	access:public	signature:(game_model& gm)
deinitialize	components/cmp_score_when_die.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_score_when_die	access:public	signature:(game_model& gm)
deinitialize	components/cmp_shoot_player.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_shoot_player	access:public	signature:(game_model& gm)
deinitialize	components/cmp_time_to_live.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_time_to_live	access:public	signature:(game_model& gm)
deinitialize	components/component.h	/^	virtual void deinitialize(game_model& gm) = 0;$/;"	p	class:component	access:public	signature:(game_model& gm)
deinitialize	components/emitters/cmp_bullet_emitter.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_bullet_emitter	access:public	signature:(game_model& gm)
deinitialize	components/position/cmp_move_const_speed.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_move_const_speed	access:public	signature:(game_model& gm)
deinitialize	components/position/cmp_move_path.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_move_path	access:public	signature:(game_model& gm)
deinitialize	components/position/cmp_move_player.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_move_player	access:public	signature:(game_model& gm)
deinitialize	components/position/cmp_orientation.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_orientation	access:public	signature:(game_model& gm)
deinitialize	components/position/cmp_rotate_const_speed.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_rotate_const_speed	access:public	signature:(game_model& gm)
deinitialize	components/wellness/cmp_health_etc.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_health_etc	access:public	signature:(game_model& gm)
deinitialize	components/wellness/cmp_health_picker.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_health_picker	access:public	signature:(game_model& gm)
deinitialize	components/wellness/cmp_painmap.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_painmap	access:public	signature:(game_model& gm)
deinitialize	components/wellness/cmp_player_health.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_player_health	access:public	signature:(game_model& gm)
deinitialize	components/wellness/cmp_smoke_when_hurt.h	/^	void deinitialize(game_model& gm) {}$/;"	f	class:cmp_smoke_when_hurt	access:public	signature:(game_model& gm)
deinitialize_components	entities/entity.cpp	/^void entity::deinitialize_components(game_model& gm) {$/;"	f	class:entity	signature:(game_model& gm)
deinitialize_components	entities/entity.h	/^	void deinitialize_components(game_model& gm);$/;"	p	class:entity	access:public	signature:(game_model& gm)
done	game_state.cpp	/^	bool done() {$/;"	f	class:game_state	access:public	signature:()
done	state.h	/^	virtual bool done() = 0;$/;"	p	class:state	access:public	signature:()
draw_bar	game_state.cpp	/^	void draw_bar(double from_bottom, double ratio, ALLEGRO_COLOR color) {$/;"	f	class:game_state	file:	access:private	signature:(double from_bottom, double ratio, ALLEGRO_COLOR color)
draw_debug	components/position/cmp_move_path.cpp	/^void cmp_move_path::draw_debug() {$/;"	f	class:cmp_move_path	signature:()
draw_debug	components/position/cmp_move_path.h	/^	void draw_debug();$/;"	p	class:cmp_move_path	access:private	signature:()
drop_t	components/component.h	/^enum class drop_t {$/;"	c
drop_t::ARMOR	components/component.h	/^	ARMOR,$/;"	m	class:drop_t	access:private
drop_t::HEALTH	components/component.h	/^	HEALTH,$/;"	m	class:drop_t	access:private
dtheta	components/component.h	/^		double dtheta;$/;"	m	struct:ent_msg::__anon6	access:public
dump_events	allegro.cpp	/^void allegro::dump_events(state& s, uint32_t& overdue_frames) {$/;"	f	class:allegro	signature:(state& s, uint32_t& overdue_frames)
dump_events	allegro.h	/^	void dump_events(state& s, uint32_t& overdue_frames);$/;"	p	class:allegro	access:public	signature:(state& s, uint32_t& overdue_frames)
dx	components/component.h	/^		double dx;$/;"	m	struct:ent_msg::__anon5	access:public
dy	components/component.h	/^		double dy;$/;"	m	struct:ent_msg::__anon5	access:public
ent_msg	components/component.h	/^struct ent_msg {$/;"	s
ent_msg::__anon10::armor	components/component.h	/^		double armor;$/;"	m	struct:ent_msg::__anon10	access:public
ent_msg::__anon10::health	components/component.h	/^		double health;$/;"	m	struct:ent_msg::__anon10	access:public
ent_msg::__anon2::cancel_dx	components/component.h	/^		bool cancel_dx;$/;"	m	struct:ent_msg::__anon2	access:public
ent_msg::__anon2::cancel_dy	components/component.h	/^		bool cancel_dy;$/;"	m	struct:ent_msg::__anon2	access:public
ent_msg::__anon3::cc	components/component.h	/^		collision_class cc;$/;"	m	struct:ent_msg::__anon3	access:public
ent_msg::__anon4::armor	components/component.h	/^		double armor;$/;"	m	struct:ent_msg::__anon4	access:public
ent_msg::__anon4::health	components/component.h	/^		double health;$/;"	m	struct:ent_msg::__anon4	access:public
ent_msg::__anon4::max_armor	components/component.h	/^		double max_armor;$/;"	m	struct:ent_msg::__anon4	access:public
ent_msg::__anon4::max_health	components/component.h	/^		double max_health;$/;"	m	struct:ent_msg::__anon4	access:public
ent_msg::__anon5::dx	components/component.h	/^		double dx;$/;"	m	struct:ent_msg::__anon5	access:public
ent_msg::__anon5::dy	components/component.h	/^		double dy;$/;"	m	struct:ent_msg::__anon5	access:public
ent_msg::__anon6::dtheta	components/component.h	/^		double dtheta;$/;"	m	struct:ent_msg::__anon6	access:public
ent_msg::__anon7::theta	components/component.h	/^		double theta;$/;"	m	struct:ent_msg::__anon7	access:public
ent_msg::__anon7::x	components/component.h	/^		double x;$/;"	m	struct:ent_msg::__anon7	access:public
ent_msg::__anon7::y	components/component.h	/^		double y;$/;"	m	struct:ent_msg::__anon7	access:public
ent_msg::__anon8::amount	components/component.h	/^		double amount;$/;"	m	struct:ent_msg::__anon8	access:public
ent_msg::animation_end_reached	components/component.h	/^	} animation_end_reached;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon1	access:public
ent_msg::cancel_move	components/component.h	/^	} cancel_move;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon2	access:public
ent_msg::collision	components/component.h	/^	} collision;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon3	access:public
ent_msg::health_etc	components/component.h	/^	} health_etc;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon4	access:public
ent_msg::move	components/component.h	/^	} move;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon5	access:public
ent_msg::orientation	components/component.h	/^	} orientation;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon7	access:public
ent_msg::pain	components/component.h	/^	} pain;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon8	access:public
ent_msg::path_end_reached	components/component.h	/^	} path_end_reached;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon9	access:public
ent_msg::pidkup	components/component.h	/^	} pidkup;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon10	access:public
ent_msg::rotate	components/component.h	/^	} rotate;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon6	access:public
ent_msg::type	components/component.h	/^	ent_msg_t type;$/;"	m	struct:ent_msg	access:public
ent_msg_t	components/component.h	/^enum class ent_msg_t {$/;"	c
ent_msg_t::ANIMATION_END_REACHED	components/component.h	/^	ANIMATION_END_REACHED,$/;"	m	class:ent_msg_t	access:private
ent_msg_t::CANCEL_MOVE	components/component.h	/^	CANCEL_MOVE,	$/;"	m	class:ent_msg_t	access:private
ent_msg_t::COLLISION	components/component.h	/^	COLLISION,$/;"	m	class:ent_msg_t	access:private
ent_msg_t::HEALTH_ETC	components/component.h	/^	HEALTH_ETC,$/;"	m	class:ent_msg_t	access:private
ent_msg_t::MOVE	components/component.h	/^	MOVE,$/;"	m	class:ent_msg_t	access:private
ent_msg_t::ORIENTATION	components/component.h	/^	ORIENTATION,	$/;"	m	class:ent_msg_t	access:private
ent_msg_t::PAIN	components/component.h	/^	PAIN,$/;"	m	class:ent_msg_t	access:private
ent_msg_t::PATH_END_REACHED	components/component.h	/^	PATH_END_REACHED,$/;"	m	class:ent_msg_t	access:private
ent_msg_t::PICKUP	components/component.h	/^	PICKUP,$/;"	m	class:ent_msg_t	access:private
ent_msg_t::ROTATE	components/component.h	/^	ROTATE,$/;"	m	class:ent_msg_t	access:private
entity	entities/entity.cpp	/^entity::entity()$/;"	f	class:entity	signature:()
entity	entities/entity.cpp	/^entity::entity(const entity& copy)$/;"	f	class:entity	signature:(const entity& copy)
entity	entities/entity.cpp	/^entity::entity(uint32_t id, const vector<shared_ptr<component>>& components)$/;"	f	class:entity	signature:(uint32_t id, const vector<shared_ptr<component>>& components)
entity	entities/entity.h	/^	entity();$/;"	p	class:entity	access:public	signature:()
entity	entities/entity.h	/^	entity(const entity& copy);$/;"	p	class:entity	access:public	signature:(const entity& copy)
entity	entities/entity.h	/^	entity(uint32_t id, const vector<shared_ptr<component>>& components);$/;"	p	class:entity	access:public	signature:(uint32_t id, const vector<shared_ptr<component>>& components)
entity	entities/entity.h	/^class entity {$/;"	c
entity::_components	entities/entity.h	/^	vector<shared_ptr<component>> _components;$/;"	m	class:entity	access:private
entity::_id	entities/entity.h	/^	uint32_t _id;$/;"	m	class:entity	access:private
entity::action	entities/entity.cpp	/^void entity::action(const config& cfg, game_model& gm) {$/;"	f	class:entity	signature:(const config& cfg, game_model& gm)
entity::action	entities/entity.h	/^	void action(const config& cfg, game_model& gs);$/;"	p	class:entity	access:public	signature:(const config& cfg, game_model& gs)
entity::deinitialize_components	entities/entity.cpp	/^void entity::deinitialize_components(game_model& gm) {$/;"	f	class:entity	signature:(game_model& gm)
entity::deinitialize_components	entities/entity.h	/^	void deinitialize_components(game_model& gm);$/;"	p	class:entity	access:public	signature:(game_model& gm)
entity::entity	entities/entity.cpp	/^entity::entity()$/;"	f	class:entity	signature:()
entity::entity	entities/entity.cpp	/^entity::entity(const entity& copy)$/;"	f	class:entity	signature:(const entity& copy)
entity::entity	entities/entity.cpp	/^entity::entity(uint32_t id, const vector<shared_ptr<component>>& components)$/;"	f	class:entity	signature:(uint32_t id, const vector<shared_ptr<component>>& components)
entity::entity	entities/entity.h	/^	entity();$/;"	p	class:entity	access:public	signature:()
entity::entity	entities/entity.h	/^	entity(const entity& copy);$/;"	p	class:entity	access:public	signature:(const entity& copy)
entity::entity	entities/entity.h	/^	entity(uint32_t id, const vector<shared_ptr<component>>& components);$/;"	p	class:entity	access:public	signature:(uint32_t id, const vector<shared_ptr<component>>& components)
entity::exhaust_msg_queue	entities/entity.cpp	/^void entity::exhaust_msg_queue(const vector<ent_msg>& messages) {$/;"	f	class:entity	signature:(const vector<ent_msg>& messages)
entity::exhaust_msg_queue	entities/entity.h	/^	void exhaust_msg_queue(const vector<ent_msg>& messages);$/;"	p	class:entity	access:private	signature:(const vector<ent_msg>& messages)
entity::get_id	entities/entity.cpp	/^uint32_t entity::get_id() const {$/;"	f	class:entity	signature:() const
entity::get_id	entities/entity.h	/^	uint32_t get_id() const;$/;"	p	class:entity	access:public	signature:() const
entity::initialize_components	entities/entity.cpp	/^void entity::initialize_components() {$/;"	f	class:entity	signature:()
entity::initialize_components	entities/entity.h	/^	void initialize_components();$/;"	p	class:entity	access:public	signature:()
entity::operator =	entities/entity.cpp	/^entity& entity::operator=(const entity& rhs) {$/;"	f	class:entity	signature:(const entity& rhs)
entity::operator =	entities/entity.h	/^	entity& operator=(const entity& rhs);$/;"	p	class:entity	access:public	signature:(const entity& rhs)
entity_builder	entities/entity_builder.cpp	/^entity_builder::entity_builder(const resman& res)$/;"	f	class:entity_builder	signature:(const resman& res)
entity_builder	entities/entity_builder.h	/^	entity_builder(const resman& res);$/;"	p	class:entity_builder	access:public	signature:(const resman& res)
entity_builder	entities/entity_builder.h	/^class entity_builder {$/;"	c
entity_builder::_components	entities/entity_builder.h	/^	vector<shared_ptr<component>> _components;$/;"	m	class:entity_builder	access:private
entity_builder::_engine	entities/entity_builder.h	/^	default_random_engine _engine;$/;"	m	class:entity_builder	access:private
entity_builder::_parent_id	entities/entity_builder.h	/^	uint32_t _parent_id;$/;"	m	class:entity_builder	access:private
entity_builder::_res	entities/entity_builder.h	/^	const resman& _res;$/;"	m	class:entity_builder	access:private
entity_builder::add_appr_bitmap	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_appr_bitmap(res_id bitmap_id) {$/;"	f	class:entity_builder	signature:(res_id bitmap_id)
entity_builder::add_appr_bitmap	entities/entity_builder.h	/^	entity_builder& add_appr_bitmap(res_id bitmap_id);$/;"	p	class:entity_builder	access:public	signature:(res_id bitmap_id)
entity_builder::add_appr_pixel	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_appr_pixel(double r, double g, double b, double a) {$/;"	f	class:entity_builder	signature:(double r, double g, double b, double a)
entity_builder::add_appr_pixel	entities/entity_builder.h	/^	entity_builder& add_appr_pixel(double r, double g, double b, double a);$/;"	p	class:entity_builder	access:public	signature:(double r, double g, double b, double a)
entity_builder::add_appr_simple_anim	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_appr_simple_anim(res_id bitmap_id, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count) {$/;"	f	class:entity_builder	signature:(res_id bitmap_id, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count)
entity_builder::add_appr_simple_anim	entities/entity_builder.h	/^	entity_builder& add_appr_simple_anim(res_id bitmap_id, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count);$/;"	p	class:entity_builder	access:public	signature:(res_id bitmap_id, uint32_t frame_width, uint32_t num_frames, vector<frame_def> frame_defs, int rep_count)
entity_builder::add_bounded_life	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_bounded_life(double x_min, double x_max, double y_min, double y_max) {$/;"	f	class:entity_builder	signature:(double x_min, double x_max, double y_min, double y_max)
entity_builder::add_bounded_life	entities/entity_builder.h	/^	entity_builder& add_bounded_life(double x_min, double x_max, double y_min, double y_max);$/;"	p	class:entity_builder	access:public	signature:(double x_min, double x_max, double y_min, double y_max)
entity_builder::add_bounded_movement	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_bounded_movement(double x_min, double x_max, double y_min, double y_max) {$/;"	f	class:entity_builder	signature:(double x_min, double x_max, double y_min, double y_max)
entity_builder::add_bounded_movement	entities/entity_builder.h	/^	entity_builder& add_bounded_movement(double x_min, double x_max, double y_min, double y_max);$/;"	p	class:entity_builder	access:public	signature:(double x_min, double x_max, double y_min, double y_max)
entity_builder::add_bullet_emitter	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_bullet_emitter(double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy) {$/;"	f	class:entity_builder	signature:(double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy)
entity_builder::add_bullet_emitter	entities/entity_builder.h	/^	entity_builder& add_bullet_emitter(double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy);$/;"	p	class:entity_builder	access:public	signature:(double dt_min, double dt_max, double vy, res_id bitmap_id, bool is_enemy)
entity_builder::add_collidable	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_collidable(collision_class cc, shared_ptr<shape> shp, collision_space& cs) {$/;"	f	class:entity_builder	signature:(collision_class cc, shared_ptr<shape> shp, collision_space& cs)
entity_builder::add_collidable	entities/entity_builder.h	/^	entity_builder& add_collidable(collision_class cc, shared_ptr<shape> shp, collision_space& cs);$/;"	p	class:entity_builder	access:public	signature:(collision_class cc, shared_ptr<shape> shp, collision_space& cs)
entity_builder::add_die_end_anim	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_die_end_anim() {$/;"	f	class:entity_builder	signature:()
entity_builder::add_die_end_anim	entities/entity_builder.h	/^	entity_builder& add_die_end_anim();$/;"	p	class:entity_builder	access:public	signature:()
entity_builder::add_drop_when_die	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_drop_when_die(drop_t drop_type) {$/;"	f	class:entity_builder	signature:(drop_t drop_type)
entity_builder::add_drop_when_die	entities/entity_builder.h	/^	entity_builder& add_drop_when_die(drop_t drop_type);$/;"	p	class:entity_builder	access:public	signature:(drop_t drop_type)
entity_builder::add_explode_when_die	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_explode_when_die(uint32_t num_debris) {$/;"	f	class:entity_builder	signature:(uint32_t num_debris)
entity_builder::add_explode_when_die	entities/entity_builder.h	/^	entity_builder& add_explode_when_die(uint32_t num_debris);$/;"	p	class:entity_builder	access:public	signature:(uint32_t num_debris)
entity_builder::add_health_etc	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_health_etc(double health, double armor) {$/;"	f	class:entity_builder	signature:(double health, double armor)
entity_builder::add_health_etc	entities/entity_builder.h	/^	entity_builder& add_health_etc(double health, double armor);$/;"	p	class:entity_builder	access:public	signature:(double health, double armor)
entity_builder::add_health_picker	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_health_picker($/;"	f	class:entity_builder	signature:( double health_boost, double armor_boost)
entity_builder::add_health_picker	entities/entity_builder.h	/^	entity_builder& add_health_picker(double health_boost, double armor_boost);$/;"	p	class:entity_builder	access:public	signature:(double health_boost, double armor_boost)
entity_builder::add_move_const_speed	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_move_const_speed(double vx, double vy) {$/;"	f	class:entity_builder	signature:(double vx, double vy)
entity_builder::add_move_const_speed	entities/entity_builder.h	/^	entity_builder& add_move_const_speed(double vx, double vy);$/;"	p	class:entity_builder	access:public	signature:(double vx, double vy)
entity_builder::add_move_path	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_move_path(vector<point> points) {$/;"	f	class:entity_builder	signature:(vector<point> points)
entity_builder::add_move_path	entities/entity_builder.h	/^	entity_builder& add_move_path(vector<point> points);$/;"	p	class:entity_builder	access:public	signature:(vector<point> points)
entity_builder::add_move_player	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_move_player() {$/;"	f	class:entity_builder	signature:()
entity_builder::add_move_player	entities/entity_builder.h	/^	entity_builder& add_move_player();$/;"	p	class:entity_builder	access:public	signature:()
entity_builder::add_orientation	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_orientation(double x, double y, double theta) {$/;"	f	class:entity_builder	signature:(double x, double y, double theta)
entity_builder::add_orientation	entities/entity_builder.h	/^	entity_builder& add_orientation(double x, double y, double theta);$/;"	p	class:entity_builder	access:public	signature:(double x, double y, double theta)
entity_builder::add_painmap	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_painmap(map<collision_class, double> pain_map) {$/;"	f	class:entity_builder	signature:(map<collision_class, double> pain_map)
entity_builder::add_painmap	entities/entity_builder.h	/^	entity_builder& add_painmap(map<collision_class, double> pain_map);$/;"	p	class:entity_builder	access:public	signature:(map<collision_class, double> pain_map)
entity_builder::add_player_health	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_player_health() {$/;"	f	class:entity_builder	signature:()
entity_builder::add_player_health	entities/entity_builder.h	/^	entity_builder& add_player_health();$/;"	p	class:entity_builder	access:public	signature:()
entity_builder::add_rotate_const_speed	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_rotate_const_speed(double omega) {$/;"	f	class:entity_builder	signature:(double omega)
entity_builder::add_rotate_const_speed	entities/entity_builder.h	/^	entity_builder& add_rotate_const_speed(double omega);$/;"	p	class:entity_builder	access:public	signature:(double omega)
entity_builder::add_score_when_die	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_score_when_die(double score) {$/;"	f	class:entity_builder	signature:(double score)
entity_builder::add_score_when_die	entities/entity_builder.h	/^	entity_builder& add_score_when_die(double score);$/;"	p	class:entity_builder	access:public	signature:(double score)
entity_builder::add_shoot_player	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_shoot_player(double period, double max_x_dev) {$/;"	f	class:entity_builder	signature:(double period, double max_x_dev)
entity_builder::add_shoot_player	entities/entity_builder.h	/^	entity_builder& add_shoot_player(double period, double max_x_dev);$/;"	p	class:entity_builder	access:public	signature:(double period, double max_x_dev)
entity_builder::add_smoke_when_hurt	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_smoke_when_hurt() {$/;"	f	class:entity_builder	signature:()
entity_builder::add_smoke_when_hurt	entities/entity_builder.h	/^	entity_builder& add_smoke_when_hurt();$/;"	p	class:entity_builder	access:public	signature:()
entity_builder::add_time_to_live	entities/entity_builder.cpp	/^entity_builder& entity_builder::add_time_to_live(double ttl) {$/;"	f	class:entity_builder	signature:(double ttl)
entity_builder::add_time_to_live	entities/entity_builder.h	/^	entity_builder& add_time_to_live(double ttl);$/;"	p	class:entity_builder	access:public	signature:(double ttl)
entity_builder::begin	entities/entity_builder.cpp	/^entity_builder& entity_builder::begin(uint32_t parent_id) {$/;"	f	class:entity_builder	signature:(uint32_t parent_id)
entity_builder::begin	entities/entity_builder.h	/^	entity_builder& begin(uint32_t parent_id);$/;"	p	class:entity_builder	access:public	signature:(uint32_t parent_id)
entity_builder::build	entities/entity_builder.cpp	/^entity entity_builder::build() {$/;"	f	class:entity_builder	signature:()
entity_builder::build	entities/entity_builder.h	/^	entity build();$/;"	p	class:entity_builder	access:public	signature:()
entity_builder::entity_builder	entities/entity_builder.cpp	/^entity_builder::entity_builder(const resman& res)$/;"	f	class:entity_builder	signature:(const resman& res)
entity_builder::entity_builder	entities/entity_builder.h	/^	entity_builder(const resman& res);$/;"	p	class:entity_builder	access:public	signature:(const resman& res)
entity_factory	entities/entity_factory.cpp	/^entity_factory::entity_factory($/;"	f	class:entity_factory	signature:( const config& config, const resman& resman)
entity_factory	entities/entity_factory.h	/^	entity_factory(const config& config, const resman& resman);$/;"	p	class:entity_factory	access:public	signature:(const config& config, const resman& resman)
entity_factory	entities/entity_factory.h	/^class entity_factory {$/;"	c
entity_factory::_config	entities/entity_factory.h	/^	const config& _config;$/;"	m	class:entity_factory	access:private
entity_factory::_engine	entities/entity_factory.h	/^	default_random_engine _engine;$/;"	m	class:entity_factory	access:private
entity_factory::_lase_shape_id	entities/entity_factory.h	/^	uint32_t _lase_shape_id;$/;"	m	class:entity_factory	access:private
entity_factory::_last_id	entities/entity_factory.h	/^	uint32_t _last_id;$/;"	m	class:entity_factory	access:private
entity_factory::_resman	entities/entity_factory.h	/^	const resman& _resman;$/;"	m	class:entity_factory	access:private
entity_factory::create_bullet	entities/entity_factory.cpp	/^entity entity_factory::create_bullet($/;"	f	class:entity_factory	signature:( double x, double y, double vx, double vy, double screen_w, double screen_h, res_id image_id, collision_space& coll_sp, collision_class coll_class)
entity_factory::create_bullet	entities/entity_factory.h	/^	entity create_bullet(double x, double y, double vx, double vy, double screen_w, double screen_h, res_id image_id, collision_space& coll_sp, collision_class coll_class);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double vx, double vy, double screen_w, double screen_h, res_id image_id, collision_space& coll_sp, collision_class coll_class)
entity_factory::create_debris	entities/entity_factory.cpp	/^entity entity_factory::create_debris(double x, double y, double vx, double vy) {$/;"	f	class:entity_factory	signature:(double x, double y, double vx, double vy)
entity_factory::create_debris	entities/entity_factory.h	/^	entity create_debris(double x, double y, double vx, double vy);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double vx, double vy)
entity_factory::create_enemy_eye	entities/entity_factory.cpp	/^entity entity_factory::create_enemy_eye($/;"	f	class:entity_factory	signature:( double screen_w, double screen_h, collision_space& coll_sp)
entity_factory::create_enemy_eye	entities/entity_factory.h	/^	entity create_enemy_eye(double screen_w, double screen_h, collision_space& coll_sp);$/;"	p	class:entity_factory	access:public	signature:(double screen_w, double screen_h, collision_space& coll_sp)
entity_factory::create_explosion	entities/entity_factory.cpp	/^entity entity_factory::create_explosion(double x, double y, double vx, double vy) {$/;"	f	class:entity_factory	signature:(double x, double y, double vx, double vy)
entity_factory::create_explosion	entities/entity_factory.h	/^	entity create_explosion(double x, double y, double vx, double vy);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double vx, double vy)
entity_factory::create_health_pickup	entities/entity_factory.cpp	/^entity entity_factory::create_health_pickup($/;"	f	class:entity_factory	signature:( double x, double y, double vx, double vy, double screen_w, double screen_h, collision_space& coll_sp)
entity_factory::create_health_pickup	entities/entity_factory.h	/^	entity create_health_pickup(double x, double y, double vx, double vy, double screen_w, double screen_h, collision_space& coll_sp);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double vx, double vy, double screen_w, double screen_h, collision_space& coll_sp)
entity_factory::create_player_ship	entities/entity_factory.cpp	/^entity entity_factory::create_player_ship($/;"	f	class:entity_factory	signature:( double x, double y, double screen_w, double screen_h, double theta, double shoot_period, double health, double armor, collision_space& coll_sp)
entity_factory::create_player_ship	entities/entity_factory.h	/^	entity create_player_ship(double x, double y, double screen_w, double screen_h, double theta, double shoot_period, double health, double armor, collision_space& coll_sp);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double screen_w, double screen_h, double theta, double shoot_period, double health, double armor, collision_space& coll_sp)
entity_factory::create_smoke	entities/entity_factory.cpp	/^entity entity_factory::create_smoke(double x, double y) {$/;"	f	class:entity_factory	signature:(double x, double y)
entity_factory::create_smoke	entities/entity_factory.h	/^	entity create_smoke(double x, double y);$/;"	p	class:entity_factory	access:public	signature:(double x, double y)
entity_factory::create_star	entities/entity_factory.cpp	/^entity entity_factory::create_star(double x, double y, double near_v, double zdist, double screen_w, double screen_h) {$/;"	f	class:entity_factory	signature:(double x, double y, double near_v, double zdist, double screen_w, double screen_h)
entity_factory::create_star	entities/entity_factory.h	/^	entity create_star(double x, double y, double near_v, double zdist, double screen_w, double screen_h);$/;"	p	class:entity_factory	access:public	signature:(double x, double y, double near_v, double zdist, double screen_w, double screen_h)
entity_factory::entity_factory	entities/entity_factory.cpp	/^entity_factory::entity_factory($/;"	f	class:entity_factory	signature:( const config& config, const resman& resman)
entity_factory::entity_factory	entities/entity_factory.h	/^	entity_factory(const config& config, const resman& resman);$/;"	p	class:entity_factory	access:public	signature:(const config& config, const resman& resman)
exhaust_msg_queue	entities/entity.cpp	/^void entity::exhaust_msg_queue(const vector<ent_msg>& messages) {$/;"	f	class:entity	signature:(const vector<ent_msg>& messages)
exhaust_msg_queue	entities/entity.h	/^	void exhaust_msg_queue(const vector<ent_msg>& messages);$/;"	p	class:entity	access:private	signature:(const vector<ent_msg>& messages)
fade_frames	resources/resman.cpp	/^void resman::fade_frames(res_id id,$/;"	f	class:resman	signature:(res_id id, string path, uint32_t num_frames)
fade_frames	resources/resman.h	/^	void fade_frames(res_id id,$/;"	p	class:resman	access:private	signature:(res_id id, string path, uint32_t num_frames)
font_deleter	resources/resman.h	/^	struct font_deleter {$/;"	s	class:resman	access:private
frame_def	components/appearance/frame_def.h	/^	frame_def() $/;"	f	struct:frame_def	access:public	signature:()
frame_def	components/appearance/frame_def.h	/^	frame_def(uint32_t index, double time)$/;"	f	struct:frame_def	access:public	signature:(uint32_t index, double time)
frame_def	components/appearance/frame_def.h	/^struct frame_def {$/;"	s
frame_def::frame_def	components/appearance/frame_def.h	/^	frame_def() $/;"	f	struct:frame_def	access:public	signature:()
frame_def::frame_def	components/appearance/frame_def.h	/^	frame_def(uint32_t index, double time)$/;"	f	struct:frame_def	access:public	signature:(uint32_t index, double time)
frame_def::index	components/appearance/frame_def.h	/^	uint32_t index;$/;"	m	struct:frame_def	access:public
frame_def::operator =	components/appearance/frame_def.h	/^	frame_def& operator=(const frame_def& rhs) {$/;"	f	struct:frame_def	access:public	signature:(const frame_def& rhs)
frame_def::time	components/appearance/frame_def.h	/^	double time;$/;"	m	struct:frame_def	access:public
frame_logic	game_state.cpp	/^	void frame_logic(double dt) {$/;"	f	class:game_state	access:public	signature:(double dt)
frame_logic	state.h	/^	virtual void frame_logic(double dt) = 0;$/;"	p	class:state	access:public	signature:(double dt)
game_model	game_model.h	/^	game_model()$/;"	f	struct:game_model	access:public	signature:()
game_model	game_model.h	/^struct game_model {$/;"	s
game_model::debug	game_model.h	/^	bool debug;$/;"	m	struct:game_model	access:public
game_model::game_model	game_model.h	/^	game_model()$/;"	f	struct:game_model	access:public	signature:()
game_model::game_msgs	game_model.h	/^	vector<game_msg> game_msgs;$/;"	m	struct:game_model	access:public
game_model::last_dt	game_model.h	/^	double last_dt;$/;"	m	struct:game_model	access:public
game_model::player_armor	game_model.h	/^	double player_armor;$/;"	m	struct:game_model	access:public
game_model::player_health	game_model.h	/^	double player_health;$/;"	m	struct:game_model	access:public
game_model::score	game_model.h	/^	double score;$/;"	m	struct:game_model	access:public
game_model::steering_vec	game_model.h	/^	double steering_vec[2];$/;"	m	struct:game_model	access:public
game_model::trigger_down	game_model.h	/^	, trigger_down(false)$/;"	p	struct:game_model	access:public	signature:(false)
game_model::trigger_down	game_model.h	/^	bool trigger_down;$/;"	m	struct:game_model	access:public
game_msg	game_model.h	/^struct game_msg {$/;"	s
game_msg::__anon11::id	game_model.h	/^		uint32_t id;$/;"	m	struct:game_msg::__anon11	access:public
game_msg::__anon12::bitmap_id	game_model.h	/^		res_id bitmap_id;$/;"	m	struct:game_msg::__anon12	access:public
game_msg::__anon12::is_enemy	game_model.h	/^		bool is_enemy;$/;"	m	struct:game_msg::__anon12	access:public
game_msg::__anon12::vx	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon12	access:public
game_msg::__anon12::vy	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon12	access:public
game_msg::__anon12::x	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon12	access:public
game_msg::__anon12::y	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon12	access:public
game_msg::__anon13::num_debris	game_model.h	/^		uint32_t num_debris;$/;"	m	struct:game_msg::__anon13	access:public
game_msg::__anon13::vx	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon13	access:public
game_msg::__anon13::vy	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon13	access:public
game_msg::__anon13::x	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon13	access:public
game_msg::__anon13::y	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon13	access:public
game_msg::__anon14::x	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon14	access:public
game_msg::__anon14::y	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon14	access:public
game_msg::__anon15::vx	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon15	access:public
game_msg::__anon15::vy	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon15	access:public
game_msg::__anon15::x	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon15	access:public
game_msg::__anon15::y	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon15	access:public
game_msg::create_remove_entity	game_model.h	/^	static game_msg create_remove_entity(uint32_t id) {$/;"	f	struct:game_msg	access:public	signature:(uint32_t id)
game_msg::create_spawn_bullets	game_model.h	/^	static game_msg create_spawn_bullets($/;"	f	struct:game_msg	access:public	signature:( double x, double y, double vx, double vy, res_id bitmap_id, bool is_enemy)
game_msg::create_spawn_expl	game_model.h	/^	static game_msg create_spawn_expl($/;"	f	struct:game_msg	access:public	signature:( uint32_t num_debris, double x, double y, double vx, double vy)
game_msg::create_spawn_health	game_model.h	/^	static game_msg create_spawn_health($/;"	f	struct:game_msg	access:public	signature:( double x, double y, double vx, double vy)
game_msg::create_spawn_smoke	game_model.h	/^	static game_msg create_spawn_smoke(double x, double y) {$/;"	f	struct:game_msg	access:public	signature:(double x, double y)
game_msg::remove_entity	game_model.h	/^	} remove_entity;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon11	access:public
game_msg::spawn_bullet	game_model.h	/^	} spawn_bullet;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon12	access:public
game_msg::spawn_expl	game_model.h	/^	} spawn_expl;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon13	access:public
game_msg::spawn_health	game_model.h	/^	} spawn_health;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon15	access:public
game_msg::spawn_smoke	game_model.h	/^	} spawn_smoke;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon14	access:public
game_msg::type	game_model.h	/^	game_msg_t type;$/;"	m	struct:game_msg	access:public
game_msg_t	game_model.h	/^enum class game_msg_t {$/;"	c
game_msg_t::REMOVE_ENTITY	game_model.h	/^	REMOVE_ENTITY,$/;"	m	class:game_msg_t	access:private
game_msg_t::SPAWN_BULLET	game_model.h	/^	SPAWN_BULLET,$/;"	m	class:game_msg_t	access:private
game_msg_t::SPAWN_EXPL	game_model.h	/^	SPAWN_EXPL,$/;"	m	class:game_msg_t	access:private
game_msg_t::SPAWN_HEALTH	game_model.h	/^	SPAWN_HEALTH,$/;"	m	class:game_msg_t	access:private
game_msg_t::SPAWN_SMOKE	game_model.h	/^	SPAWN_SMOKE,$/;"	m	class:game_msg_t	access:private
game_msgs	game_model.h	/^	vector<game_msg> game_msgs;$/;"	m	struct:game_model	access:public
game_state	game_state.cpp	/^	game_state(const config& config, const resman& resman)$/;"	f	class:game_state	access:public	signature:(const config& config, const resman& resman)
game_state	game_state.cpp	/^class game_state : public state {			$/;"	c	file:	inherits:state
game_state::_coll_space	game_state.cpp	/^	collision_space _coll_space;$/;"	m	class:game_state	file:	access:private
game_state::_config	game_state.cpp	/^	const config& _config;$/;"	m	class:game_state	file:	access:private
game_state::_done	game_state.cpp	/^	bool _done;$/;"	m	class:game_state	file:	access:private
game_state::_engine	game_state.cpp	/^	default_random_engine _engine;$/;"	m	class:game_state	file:	access:private
game_state::_entities	game_state.cpp	/^	vector<entity> _entities;$/;"	m	class:game_state	file:	access:private
game_state::_entity_factory	game_state.cpp	/^	entity_factory _entity_factory;$/;"	m	class:game_state	file:	access:private
game_state::_eye_spawn_clk	game_state.cpp	/^	random_clock<uniform_real_distribution<double>> _eye_spawn_clk;$/;"	m	class:game_state	file:	access:private
game_state::_font	game_state.cpp	/^	ALLEGRO_FONT* _font;$/;"	m	class:game_state	file:	access:private
game_state::_game_model	game_state.cpp	/^	game_model _game_model;$/;"	m	class:game_state	file:	access:private
game_state::_keymap	game_state.cpp	/^	map<int, bool> _keymap;$/;"	m	class:game_state	file:	access:private
game_state::_resman	game_state.cpp	/^	const resman& _resman;$/;"	m	class:game_state	file:	access:private
game_state::_star_spawn_clk	game_state.cpp	/^	random_clock<exponential_distribution<double>> _star_spawn_clk;$/;"	m	class:game_state	file:	access:private
game_state::done	game_state.cpp	/^	bool done() {$/;"	f	class:game_state	access:public	signature:()
game_state::draw_bar	game_state.cpp	/^	void draw_bar(double from_bottom, double ratio, ALLEGRO_COLOR color) {$/;"	f	class:game_state	file:	access:private	signature:(double from_bottom, double ratio, ALLEGRO_COLOR color)
game_state::frame_logic	game_state.cpp	/^	void frame_logic(double dt) {$/;"	f	class:game_state	access:public	signature:(double dt)
game_state::game_state	game_state.cpp	/^	game_state(const config& config, const resman& resman)$/;"	f	class:game_state	access:public	signature:(const config& config, const resman& resman)
game_state::handle_messages	game_state.cpp	/^	void handle_messages() {$/;"	f	class:game_state	file:	access:private	signature:()
game_state::health_color	game_state.cpp	/^	ALLEGRO_COLOR health_color(double health_ratio) {$/;"	f	class:game_state	file:	access:private	signature:(double health_ratio)
game_state::init_frame_state	game_state.cpp	/^	void init_frame_state() {$/;"	f	class:game_state	file:	access:private	signature:()
game_state::initialize_entities	game_state.cpp	/^	void initialize_entities() {$/;"	f	class:game_state	file:	access:private	signature:()
game_state::key_down	game_state.cpp	/^	void key_down(int k) {$/;"	f	class:game_state	access:public	signature:(int k)
game_state::key_up	game_state.cpp	/^	void key_up(int k) {$/;"	f	class:game_state	access:public	signature:(int k)
game_state::next_state	game_state.cpp	/^	unique_ptr<state> next_state() {$/;"	f	class:game_state	access:public	signature:()
game_state::print_hud	game_state.cpp	/^	void print_hud() {$/;"	f	class:game_state	file:	access:private	signature:()
game_state::remove_entity	game_state.cpp	/^	void remove_entity(uint32_t id) {$/;"	f	class:game_state	file:	access:private	signature:(uint32_t id)
game_state::sigkill	game_state.cpp	/^	void sigkill() {$/;"	f	class:game_state	access:public	signature:()
game_state::spawn_bullet	game_state.cpp	/^	void spawn_bullet(	double x, double y,$/;"	f	class:game_state	file:	access:private	signature:( double x, double y, double vx, double vy, res_id bitmap_id, bool is_enemy)
game_state::spawn_explosion	game_state.cpp	/^	void spawn_explosion(uint32_t num_debris, double x, double y, double vx, double vy) {$/;"	f	class:game_state	file:	access:private	signature:(uint32_t num_debris, double x, double y, double vx, double vy)
game_state::spawn_eye_enemy	game_state.cpp	/^	void spawn_eye_enemy() {$/;"	f	class:game_state	file:	access:private	signature:()
game_state::spawn_health	game_state.cpp	/^	void spawn_health(double x, double y, double vx, double vy) {$/;"	f	class:game_state	file:	access:private	signature:(double x, double y, double vx, double vy)
game_state::spawn_smoke	game_state.cpp	/^	void spawn_smoke(double x, double y) {$/;"	f	class:game_state	file:	access:private	signature:(double x, double y)
game_state::spawn_star	game_state.cpp	/^	void spawn_star() {$/;"	f	class:game_state	file:	access:private	signature:()
game_state::~game_state	game_state.cpp	/^	~game_state() {$/;"	f	class:game_state	access:public	signature:()
gen_expand_fade	resources/resman.cpp	/^void resman::gen_expand_fade($/;"	f	class:resman	signature:( res_id id, string path, uint32_t num_frames, double exp_factor)
gen_expand_fade	resources/resman.h	/^	void gen_expand_fade($/;"	p	class:resman	access:private	signature:( res_id id, string path, uint32_t num_frames, double exp_factor)
get_bitmap	resources/resman.cpp	/^ALLEGRO_BITMAP* resman::get_bitmap(res_id id) const {$/;"	f	class:resman	signature:(res_id id) const
get_bitmap	resources/resman.h	/^	ALLEGRO_BITMAP* get_bitmap(res_id id) const;$/;"	p	class:resman	access:public	signature:(res_id id) const
get_display	allegro.cpp	/^ALLEGRO_DISPLAY* allegro::get_display() {$/;"	f	class:allegro	signature:()
get_display	allegro.h	/^	ALLEGRO_DISPLAY* get_display();$/;"	p	class:allegro	access:public	signature:()
get_eye_bullet_v	config.h	/^	double get_eye_bullet_v() const {$/;"	f	class:config	access:public	signature:() const
get_eye_v	config.h	/^	double get_eye_v() const {$/;"	f	class:config	access:public	signature:() const
get_font	resources/resman.cpp	/^ALLEGRO_FONT* resman::get_font(res_id id) const {$/;"	f	class:resman	signature:(res_id id) const
get_font	resources/resman.h	/^	ALLEGRO_FONT* get_font(res_id id) const;$/;"	p	class:resman	access:public	signature:(res_id id) const
get_fps	config.h	/^	double get_fps() const {$/;"	f	class:config	access:public	signature:() const
get_id	collision/shape.h	/^	uint32_t get_id() const { return _id; }$/;"	f	class:shape	access:public	signature:() const
get_id	entities/entity.cpp	/^uint32_t entity::get_id() const {$/;"	f	class:entity	signature:() const
get_id	entities/entity.h	/^	uint32_t get_id() const;$/;"	p	class:entity	access:public	signature:() const
get_near_star_v	config.h	/^	double get_near_star_v() const {$/;"	f	class:config	access:public	signature:() const
get_player_bullet_v	config.h	/^	double get_player_bullet_v() const {$/;"	f	class:config	access:public	signature:() const
get_player_max_armor	config.h	/^	double get_player_max_armor() const {$/;"	f	class:config	access:public	signature:() const
get_player_max_health	config.h	/^	double get_player_max_health() const {$/;"	f	class:config	access:public	signature:() const
get_player_vx	config.h	/^	double get_player_vx() const {$/;"	f	class:config	access:public	signature:() const
get_player_vy	config.h	/^	double get_player_vy() const {$/;"	f	class:config	access:public	signature:() const
get_r	collision/circle.h	/^	double get_r() const { return _r; }$/;"	f	class:circle	access:public	signature:() const
get_screen_h	config.h	/^	double get_screen_h() const {$/;"	f	class:config	access:public	signature:() const
get_screen_w	config.h	/^	double get_screen_w() const {$/;"	f	class:config	access:public	signature:() const
get_shoot_period	config.h	/^	double get_shoot_period() const {$/;"	f	class:config	access:public	signature:() const
get_x	collision/circle.h	/^	double get_x() const { return _x; }$/;"	f	class:circle	access:public	signature:() const
get_y	collision/circle.h	/^	double get_y() const { return _y; }$/;"	f	class:circle	access:public	signature:() const
handle_event	allegro.cpp	/^void allegro::handle_event(ALLEGRO_EVENT& ev, state& s, uint32_t& overdue_frame) {$/;"	f	class:allegro	signature:(ALLEGRO_EVENT& ev, state& s, uint32_t& overdue_frame)
handle_event	allegro.h	/^	void handle_event(ALLEGRO_EVENT& ev, state& s, uint32_t& overdue_frame);$/;"	p	class:allegro	access:private	signature:(ALLEGRO_EVENT& ev, state& s, uint32_t& overdue_frame)
handle_messages	game_state.cpp	/^	void handle_messages() {$/;"	f	class:game_state	file:	access:private	signature:()
handle_report	components/cmp_collidable.cpp	/^ent_msg cmp_collidable::handle_report(const coll_report& report) {$/;"	f	class:cmp_collidable	signature:(const coll_report& report)
handle_report	components/cmp_collidable.h	/^	ent_msg handle_report(const coll_report& report);$/;"	p	class:cmp_collidable	access:private	signature:(const coll_report& report)
health	components/component.h	/^		double health;$/;"	m	struct:ent_msg::__anon10	access:public
health	components/component.h	/^		double health;$/;"	m	struct:ent_msg::__anon4	access:public
health_color	game_state.cpp	/^	ALLEGRO_COLOR health_color(double health_ratio) {$/;"	f	class:game_state	file:	access:private	signature:(double health_ratio)
health_etc	components/component.h	/^	} health_etc;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon4	access:public
health_etc_msg	components/wellness/cmp_health_etc.cpp	/^ent_msg cmp_health_etc::health_etc_msg() {$/;"	f	class:cmp_health_etc	signature:()
health_etc_msg	components/wellness/cmp_health_etc.h	/^	ent_msg health_etc_msg();$/;"	p	class:cmp_health_etc	access:private	signature:()
id	game_model.h	/^		uint32_t id;$/;"	m	struct:game_msg::__anon11	access:public
index	components/appearance/frame_def.h	/^	uint32_t index;$/;"	m	struct:frame_def	access:public
init_frame_state	game_state.cpp	/^	void init_frame_state() {$/;"	f	class:game_state	file:	access:private	signature:()
initialization_error	exceptions.h	/^	initialization_error(string message)$/;"	f	class:initialization_error	access:public	signature:(string message)
initialization_error	exceptions.h	/^class initialization_error : public runtime_error {$/;"	c	inherits:runtime_error
initialization_error::initialization_error	exceptions.h	/^	initialization_error(string message)$/;"	f	class:initialization_error	access:public	signature:(string message)
initialize	components/appearance/cmp_appr_bitmap.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_appr_bitmap	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/appearance/cmp_appr_pixel.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_appr_pixel	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/appearance/cmp_appr_simple_anim.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_appr_simple_anim	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/bounds/cmp_bounded_life.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_bounded_life	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/bounds/cmp_bounded_movement.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_bounded_movement	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/cmp_collidable.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_collidable	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/cmp_die_end_anim.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_die_end_anim	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/cmp_drop_when_die.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_drop_when_die	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/cmp_explode_when_die.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_explode_when_die	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/cmp_score_when_die.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_score_when_die	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/cmp_shoot_player.cpp	/^void cmp_shoot_player::initialize(vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_shoot_player	signature:(vector<ent_msg>& ent_msgs)
initialize	components/cmp_shoot_player.h	/^	void initialize(vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_shoot_player	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/cmp_time_to_live.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_time_to_live	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/component.h	/^	virtual void initialize(vector<ent_msg>& ent_msgs) = 0;$/;"	p	class:component	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/emitters/cmp_bullet_emitter.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_bullet_emitter	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/position/cmp_move_const_speed.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_move_const_speed	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/position/cmp_move_path.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_move_path	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/position/cmp_move_player.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_move_player	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/position/cmp_orientation.cpp	/^void cmp_orientation::initialize(vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_orientation	signature:(vector<ent_msg>& ent_msgs)
initialize	components/position/cmp_orientation.h	/^	void initialize(vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_orientation	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/position/cmp_rotate_const_speed.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_rotate_const_speed	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/wellness/cmp_health_etc.cpp	/^void cmp_health_etc::initialize(vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_health_etc	signature:(vector<ent_msg>& ent_msgs)
initialize	components/wellness/cmp_health_etc.h	/^	void initialize(vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_etc	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/wellness/cmp_health_picker.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_health_picker	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/wellness/cmp_painmap.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_painmap	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/wellness/cmp_player_health.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_player_health	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize	components/wellness/cmp_smoke_when_hurt.h	/^	void initialize(vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_smoke_when_hurt	access:public	signature:(vector<ent_msg>& ent_msgs)
initialize_components	entities/entity.cpp	/^void entity::initialize_components() {$/;"	f	class:entity	signature:()
initialize_components	entities/entity.h	/^	void initialize_components();$/;"	p	class:entity	access:public	signature:()
initialize_entities	game_state.cpp	/^	void initialize_entities() {$/;"	f	class:game_state	file:	access:private	signature:()
is_enemy	game_model.h	/^		bool is_enemy;$/;"	m	struct:game_msg::__anon12	access:public
key_down	game_state.cpp	/^	void key_down(int k) {$/;"	f	class:game_state	access:public	signature:(int k)
key_down	state.h	/^	virtual void key_down(int k) {}$/;"	f	class:state	access:public	signature:(int k)
key_up	game_state.cpp	/^	void key_up(int k) {$/;"	f	class:game_state	access:public	signature:(int k)
key_up	state.h	/^	virtual void key_up(int k) {}$/;"	f	class:state	access:public	signature:(int k)
last_dt	game_model.h	/^	double last_dt;$/;"	m	struct:game_model	access:public
loop	main.cpp	/^	void loop() {$/;"	f	class:application	access:public	signature:()
main	main.cpp	/^int main() {$/;"	f	signature:()
max_armor	components/component.h	/^		double max_armor;$/;"	m	struct:ent_msg::__anon4	access:public
max_health	components/component.h	/^		double max_health;$/;"	m	struct:ent_msg::__anon4	access:public
move	components/component.h	/^	} move;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon5	access:public
next_state	game_state.cpp	/^	unique_ptr<state> next_state() {$/;"	f	class:game_state	access:public	signature:()
next_state	state.h	/^	virtual unique_ptr<state> next_state() = 0;$/;"	p	class:state	access:public	signature:()
num_debris	game_model.h	/^		uint32_t num_debris;$/;"	m	struct:game_msg::__anon13	access:public
operator ()	resources/resman.h	/^		void operator()(ALLEGRO_BITMAP* bitmap) {			$/;"	f	struct:resman::bitmap_deleter	access:public	signature:(ALLEGRO_BITMAP* bitmap)
operator ()	resources/resman.h	/^		void operator()(ALLEGRO_FONT* font) {$/;"	f	struct:resman::font_deleter	access:public	signature:(ALLEGRO_FONT* font)
operator =	components/appearance/frame_def.h	/^	frame_def& operator=(const frame_def& rhs) {$/;"	f	struct:frame_def	access:public	signature:(const frame_def& rhs)
operator =	entities/entity.cpp	/^entity& entity::operator=(const entity& rhs) {$/;"	f	class:entity	signature:(const entity& rhs)
operator =	entities/entity.h	/^	entity& operator=(const entity& rhs);$/;"	p	class:entity	access:public	signature:(const entity& rhs)
orientation	components/component.h	/^	} orientation;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon7	access:public
orientation_msg	components/position/cmp_orientation.cpp	/^ent_msg cmp_orientation::orientation_msg() {$/;"	f	class:cmp_orientation	signature:()
orientation_msg	components/position/cmp_orientation.h	/^	ent_msg orientation_msg();$/;"	p	class:cmp_orientation	access:private	signature:()
p_bmp	resources/resman.h	/^	typedef unique_ptr<ALLEGRO_BITMAP, bitmap_deleter> p_bmp;$/;"	t	class:resman	access:private
pain	components/component.h	/^	} pain;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon8	access:public
path_end_reached	components/component.h	/^	} path_end_reached;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon9	access:public
perform_move	components/position/cmp_move_path.cpp	/^void cmp_move_path::perform_move(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_path	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
perform_move	components/position/cmp_move_path.h	/^	void perform_move(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_path	access:private	signature:(const config& cfg, game_model& gm, vector<ent_msg>& ent_msgs)
pidkup	components/component.h	/^	} pidkup;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon10	access:public
player_armor	game_model.h	/^	double player_armor;$/;"	m	struct:game_model	access:public
player_health	game_model.h	/^	double player_health;$/;"	m	struct:game_model	access:public
point	geometry/types.h	/^	point(double x, double y) : x(x), y(y) {}$/;"	f	struct:point	access:public	signature:(double x, double y)
point	geometry/types.h	/^struct point {$/;"	s
point::point	geometry/types.h	/^	point(double x, double y) : x(x), y(y) {}$/;"	f	struct:point	access:public	signature:(double x, double y)
point::x	geometry/types.h	/^	double x, y;$/;"	m	struct:point	access:public
point::y	geometry/types.h	/^	double x, y;$/;"	m	struct:point	access:public
position_msg	components/position/cmp_move_path.cpp	/^ent_msg cmp_move_path::position_msg(double x, double y) {$/;"	f	class:cmp_move_path	signature:(double x, double y)
position_msg	components/position/cmp_move_path.h	/^	ent_msg position_msg(double x, double y);$/;"	p	class:cmp_move_path	access:private	signature:(double x, double y)
print_hud	game_state.cpp	/^	void print_hud() {$/;"	f	class:game_state	file:	access:private	signature:()
random_clock	random_clock.h	/^	random_clock(const DISTRIBUTION& distribution, function<void()> callback)$/;"	f	class:random_clock	access:public	signature:(const DISTRIBUTION& distribution, function<void()> callback)
random_clock	random_clock.h	/^class random_clock {$/;"	c
random_clock::_callback	random_clock.h	/^	function<void()> _callback;$/;"	m	class:random_clock	access:private
random_clock::_distribution	random_clock.h	/^	DISTRIBUTION _distribution;$/;"	m	class:random_clock	access:private
random_clock::_engine	random_clock.h	/^	default_random_engine _engine;$/;"	m	class:random_clock	access:private
random_clock::_timer	random_clock.h	/^	double _timer;$/;"	m	class:random_clock	access:private
random_clock::random_clock	random_clock.h	/^	random_clock(const DISTRIBUTION& distribution, function<void()> callback)$/;"	f	class:random_clock	access:public	signature:(const DISTRIBUTION& distribution, function<void()> callback)
random_clock::schedule	random_clock.h	/^	void schedule(double remainder) {$/;"	f	class:random_clock	access:private	signature:(double remainder)
random_clock::tick	random_clock.h	/^	void tick(double dt) {$/;"	f	class:random_clock	access:public	signature:(double dt)
receive_message	components/appearance/cmp_appr_bitmap.cpp	/^void cmp_appr_bitmap::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_bitmap	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/appearance/cmp_appr_bitmap.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_bitmap	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/appearance/cmp_appr_pixel.cpp	/^void cmp_appr_pixel::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_pixel	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/appearance/cmp_appr_pixel.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_pixel	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/appearance/cmp_appr_simple_anim.cpp	/^void cmp_appr_simple_anim::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_appr_simple_anim	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/appearance/cmp_appr_simple_anim.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_appr_simple_anim	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/bounds/cmp_bounded_life.cpp	/^void cmp_bounded_life::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_bounded_life	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/bounds/cmp_bounded_life.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bounded_life	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/bounds/cmp_bounded_movement.cpp	/^void cmp_bounded_movement::receive_message($/;"	f	class:cmp_bounded_movement	signature:( const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/bounds/cmp_bounded_movement.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bounded_movement	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_collidable.cpp	/^void cmp_collidable::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_collidable	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_collidable.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_collidable	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_die_end_anim.cpp	/^void cmp_die_end_anim::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_die_end_anim	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_die_end_anim.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_die_end_anim	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_drop_when_die.cpp	/^void cmp_drop_when_die::receive_message($/;"	f	class:cmp_drop_when_die	signature:( const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_drop_when_die.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_drop_when_die	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_explode_when_die.cpp	/^void cmp_explode_when_die::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_explode_when_die	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_explode_when_die.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_explode_when_die	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_score_when_die.cpp	/^void cmp_score_when_die::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_score_when_die	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_score_when_die.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_score_when_die	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_shoot_player.cpp	/^void cmp_shoot_player::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_shoot_player	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_shoot_player.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_shoot_player	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/cmp_time_to_live.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_time_to_live	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/component.h	/^	virtual void receive_message($/;"	p	class:component	access:public	signature:( const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/emitters/cmp_bullet_emitter.cpp	/^void cmp_bullet_emitter::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_bullet_emitter	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/emitters/cmp_bullet_emitter.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_bullet_emitter	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/position/cmp_move_const_speed.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_move_const_speed	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/position/cmp_move_path.cpp	/^void cmp_move_path::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_path	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/position/cmp_move_path.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_path	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/position/cmp_move_player.cpp	/^void cmp_move_player::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_move_player	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/position/cmp_move_player.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_move_player	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/position/cmp_orientation.cpp	/^void cmp_orientation::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_orientation	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/position/cmp_orientation.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_orientation	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/position/cmp_rotate_const_speed.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {}$/;"	f	class:cmp_rotate_const_speed	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_health_etc.cpp	/^void cmp_health_etc::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_health_etc	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_health_etc.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_etc	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_health_picker.cpp	/^void cmp_health_picker::receive_message($/;"	f	class:cmp_health_picker	signature:( const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_health_picker.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_health_picker	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_painmap.cpp	/^void cmp_painmap::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_painmap	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_painmap.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_painmap	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_player_health.cpp	/^void cmp_player_health::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_player_health	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_player_health.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_player_health	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_smoke_when_hurt.cpp	/^void cmp_smoke_when_hurt::receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs) {$/;"	f	class:cmp_smoke_when_hurt	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
receive_message	components/wellness/cmp_smoke_when_hurt.h	/^	void receive_message(const ent_msg& msg, vector<ent_msg>& ent_msgs);$/;"	p	class:cmp_smoke_when_hurt	access:public	signature:(const ent_msg& msg, vector<ent_msg>& ent_msgs)
register_shape	collision/collision_space.cpp	/^void collision_space::register_shape(collision_class cc, shared_ptr<shape> shp, function<void(const coll_report&)> cb) {$/;"	f	class:collision_space	signature:(collision_class cc, shared_ptr<shape> shp, function<void(const coll_report&)> cb)
register_shape	collision/collision_space.h	/^	void register_shape(collision_class cc, shared_ptr<shape> shp, function<void(const coll_report&)> cb);$/;"	p	class:collision_space	access:public	signature:(collision_class cc, shared_ptr<shape> shp, function<void(const coll_report&)> cb)
remove_entity	game_model.h	/^	} remove_entity;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon11	access:public
remove_entity	game_state.cpp	/^	void remove_entity(uint32_t id) {$/;"	f	class:game_state	file:	access:private	signature:(uint32_t id)
remove_entry_by_shape_id	collision/collision_space.cpp	/^void collision_space::remove_entry_by_shape_id(uint32_t id) {$/;"	f	class:collision_space	signature:(uint32_t id)
remove_entry_by_shape_id	collision/collision_space.h	/^	void remove_entry_by_shape_id(uint32_t id);$/;"	p	class:collision_space	access:public	signature:(uint32_t id)
res_id	resources/resman.h	/^enum class res_id : int {$/;"	c
res_id::DEBRIS1	resources/resman.h	/^	DEBRIS1,$/;"	m	class:res_id	access:private
res_id::DEBRIS2	resources/resman.h	/^	DEBRIS2,$/;"	m	class:res_id	access:private
res_id::DEBRIS3	resources/resman.h	/^	DEBRIS3,$/;"	m	class:res_id	access:private
res_id::DEBRIS4	resources/resman.h	/^	DEBRIS4,$/;"	m	class:res_id	access:private
res_id::DEBRIS5	resources/resman.h	/^	DEBRIS5,$/;"	m	class:res_id	access:private
res_id::ENEMY_EYE	resources/resman.h	/^	ENEMY_EYE,$/;"	m	class:res_id	access:private
res_id::EXPLOSION	resources/resman.h	/^	EXPLOSION,$/;"	m	class:res_id	access:private
res_id::EXPLOSION_1	resources/resman.h	/^	EXPLOSION_1,$/;"	m	class:res_id	access:private
res_id::EYE_BULLET	resources/resman.h	/^	EYE_BULLET,$/;"	m	class:res_id	access:private
res_id::FONT	resources/resman.h	/^	FONT,$/;"	m	class:res_id	access:private
res_id::HEALTH	resources/resman.h	/^	HEALTH,$/;"	m	class:res_id	access:private
res_id::PLAYER_BULLET	resources/resman.h	/^	PLAYER_BULLET,$/;"	m	class:res_id	access:private
res_id::PLAYER_SHIP	resources/resman.h	/^	PLAYER_SHIP,$/;"	m	class:res_id	access:private
res_id::SMOKE	resources/resman.h	/^	SMOKE,$/;"	m	class:res_id	access:private
res_id::SMOKE_1	resources/resman.h	/^	SMOKE_1,$/;"	m	class:res_id	access:private
reset_counter	components/emitters/cmp_bullet_emitter.cpp	/^void cmp_bullet_emitter::reset_counter(double rest) {$/;"	f	class:cmp_bullet_emitter	signature:(double rest)
reset_counter	components/emitters/cmp_bullet_emitter.h	/^	void reset_counter(double rest);$/;"	p	class:cmp_bullet_emitter	access:private	signature:(double rest)
reset_counter	components/wellness/cmp_smoke_when_hurt.cpp	/^void cmp_smoke_when_hurt::reset_counter(double rest) {$/;"	f	class:cmp_smoke_when_hurt	signature:(double rest)
reset_counter	components/wellness/cmp_smoke_when_hurt.h	/^	void reset_counter(double rest);$/;"	p	class:cmp_smoke_when_hurt	access:private	signature:(double rest)
resman	resources/resman.cpp	/^resman::resman(ALLEGRO_DISPLAY* dpy)$/;"	f	class:resman	signature:(ALLEGRO_DISPLAY* dpy)
resman	resources/resman.h	/^	resman(ALLEGRO_DISPLAY* dpy);$/;"	p	class:resman	access:public	signature:(ALLEGRO_DISPLAY* dpy)
resman	resources/resman.h	/^class resman {$/;"	c
resman::_bitmaps	resources/resman.h	/^	map<res_id, p_bmp> _bitmaps;$/;"	m	class:resman	access:private
resman::_dpy	resources/resman.h	/^	ALLEGRO_DISPLAY* _dpy;$/;"	m	class:resman	access:private
resman::_fonts	resources/resman.h	/^	map<res_id, unique_ptr<ALLEGRO_FONT, font_deleter>> _fonts;$/;"	m	class:resman	access:private
resman::add_bitmap	resources/resman.cpp	/^void resman::add_bitmap(res_id id, string path) {$/;"	f	class:resman	signature:(res_id id, string path)
resman::add_bitmap	resources/resman.h	/^	void add_bitmap(res_id id, string path);$/;"	p	class:resman	access:private	signature:(res_id id, string path)
resman::add_font	resources/resman.cpp	/^void resman::add_font(res_id id, string path) {$/;"	f	class:resman	signature:(res_id id, string path)
resman::add_font	resources/resman.h	/^	void add_font(res_id id, string path);$/;"	p	class:resman	access:private	signature:(res_id id, string path)
resman::bitmap_deleter	resources/resman.h	/^	struct bitmap_deleter {$/;"	s	class:resman	access:private
resman::bitmap_deleter::operator ()	resources/resman.h	/^		void operator()(ALLEGRO_BITMAP* bitmap) {			$/;"	f	struct:resman::bitmap_deleter	access:public	signature:(ALLEGRO_BITMAP* bitmap)
resman::fade_frames	resources/resman.cpp	/^void resman::fade_frames(res_id id,$/;"	f	class:resman	signature:(res_id id, string path, uint32_t num_frames)
resman::fade_frames	resources/resman.h	/^	void fade_frames(res_id id,$/;"	p	class:resman	access:private	signature:(res_id id, string path, uint32_t num_frames)
resman::font_deleter	resources/resman.h	/^	struct font_deleter {$/;"	s	class:resman	access:private
resman::font_deleter::operator ()	resources/resman.h	/^		void operator()(ALLEGRO_FONT* font) {$/;"	f	struct:resman::font_deleter	access:public	signature:(ALLEGRO_FONT* font)
resman::gen_expand_fade	resources/resman.cpp	/^void resman::gen_expand_fade($/;"	f	class:resman	signature:( res_id id, string path, uint32_t num_frames, double exp_factor)
resman::gen_expand_fade	resources/resman.h	/^	void gen_expand_fade($/;"	p	class:resman	access:private	signature:( res_id id, string path, uint32_t num_frames, double exp_factor)
resman::get_bitmap	resources/resman.cpp	/^ALLEGRO_BITMAP* resman::get_bitmap(res_id id) const {$/;"	f	class:resman	signature:(res_id id) const
resman::get_bitmap	resources/resman.h	/^	ALLEGRO_BITMAP* get_bitmap(res_id id) const;$/;"	p	class:resman	access:public	signature:(res_id id) const
resman::get_font	resources/resman.cpp	/^ALLEGRO_FONT* resman::get_font(res_id id) const {$/;"	f	class:resman	signature:(res_id id) const
resman::get_font	resources/resman.h	/^	ALLEGRO_FONT* get_font(res_id id) const;$/;"	p	class:resman	access:public	signature:(res_id id) const
resman::p_bmp	resources/resman.h	/^	typedef unique_ptr<ALLEGRO_BITMAP, bitmap_deleter> p_bmp;$/;"	t	class:resman	access:private
resman::resman	resources/resman.cpp	/^resman::resman(ALLEGRO_DISPLAY* dpy)$/;"	f	class:resman	signature:(ALLEGRO_DISPLAY* dpy)
resman::resman	resources/resman.h	/^	resman(ALLEGRO_DISPLAY* dpy);$/;"	p	class:resman	access:public	signature:(ALLEGRO_DISPLAY* dpy)
rotate	components/component.h	/^	} rotate;$/;"	m	struct:ent_msg	typeref:struct:ent_msg::__anon6	access:public
schedule	random_clock.h	/^	void schedule(double remainder) {$/;"	f	class:random_clock	access:private	signature:(double remainder)
score	game_model.h	/^	double score;$/;"	m	struct:game_model	access:public
segment	geometry/types.h	/^	segment(const point& a, const point& b) : a(a), b(b) {}$/;"	f	struct:segment	access:public	signature:(const point& a, const point& b)
segment	geometry/types.h	/^struct segment {$/;"	s
segment::a	geometry/types.h	/^	point a, b;$/;"	m	struct:segment	access:public
segment::b	geometry/types.h	/^	point a, b;$/;"	m	struct:segment	access:public
segment::segment	geometry/types.h	/^	segment(const point& a, const point& b) : a(a), b(b) {}$/;"	f	struct:segment	access:public	signature:(const point& a, const point& b)
shape	collision/shape.h	/^	shape(uint32_t id) : _id(id) {$/;"	f	class:shape	access:public	signature:(uint32_t id)
shape	collision/shape.h	/^class shape {$/;"	c
shape::_id	collision/shape.h	/^	uint32_t _id;$/;"	m	class:shape	access:private
shape::collide_with	collision/shape.h	/^	virtual bool collide_with(const shape& s) const = 0;$/;"	p	class:shape	access:public	signature:(const shape& s) const
shape::collide_with_circle	collision/shape.h	/^	virtual bool collide_with_circle(const circle& c) const = 0;$/;"	p	class:shape	access:public	signature:(const circle& c) const
shape::get_id	collision/shape.h	/^	uint32_t get_id() const { return _id; }$/;"	f	class:shape	access:public	signature:() const
shape::shape	collision/shape.h	/^	shape(uint32_t id) : _id(id) {$/;"	f	class:shape	access:public	signature:(uint32_t id)
shape::shift	collision/shape.h	/^	virtual void shift(double dx, double dy) = 0;$/;"	p	class:shape	access:public	signature:(double dx, double dy)
shape::~shape	collision/shape.h	/^	virtual ~shape() {}$/;"	f	class:shape	access:public	signature:()
shape_a	collision/collision_space.h	/^	shared_ptr<shape> shape_a;$/;"	m	struct:coll_report	access:public
shape_b	collision/collision_space.h	/^	shared_ptr<shape> shape_b;$/;"	m	struct:coll_report	access:public
shift	collision/circle.h	/^	void shift(double dx, double dy) { _x += dx; _y += dy; }$/;"	f	class:circle	access:public	signature:(double dx, double dy)
shift	collision/shape.h	/^	virtual void shift(double dx, double dy) = 0;$/;"	p	class:shape	access:public	signature:(double dx, double dy)
shp	collision/collision_space.h	/^	shared_ptr<shape> shp;$/;"	m	struct:coll_entry	access:public
sigkill	game_state.cpp	/^	void sigkill() {$/;"	f	class:game_state	access:public	signature:()
sigkill	state.h	/^	virtual void sigkill() = 0;$/;"	p	class:state	access:public	signature:()
spawn_bullet	game_model.h	/^	} spawn_bullet;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon12	access:public
spawn_bullet	game_state.cpp	/^	void spawn_bullet(	double x, double y,$/;"	f	class:game_state	file:	access:private	signature:( double x, double y, double vx, double vy, res_id bitmap_id, bool is_enemy)
spawn_expl	game_model.h	/^	} spawn_expl;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon13	access:public
spawn_explosion	game_state.cpp	/^	void spawn_explosion(uint32_t num_debris, double x, double y, double vx, double vy) {$/;"	f	class:game_state	file:	access:private	signature:(uint32_t num_debris, double x, double y, double vx, double vy)
spawn_eye_enemy	game_state.cpp	/^	void spawn_eye_enemy() {$/;"	f	class:game_state	file:	access:private	signature:()
spawn_health	game_model.h	/^	} spawn_health;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon15	access:public
spawn_health	game_state.cpp	/^	void spawn_health(double x, double y, double vx, double vy) {$/;"	f	class:game_state	file:	access:private	signature:(double x, double y, double vx, double vy)
spawn_smoke	game_model.h	/^	} spawn_smoke;$/;"	m	struct:game_msg	typeref:struct:game_msg::__anon14	access:public
spawn_smoke	game_state.cpp	/^	void spawn_smoke(double x, double y) {$/;"	f	class:game_state	file:	access:private	signature:(double x, double y)
spawn_star	game_state.cpp	/^	void spawn_star() {$/;"	f	class:game_state	file:	access:private	signature:()
state	state.h	/^class state {$/;"	c
state::done	state.h	/^	virtual bool done() = 0;$/;"	p	class:state	access:public	signature:()
state::frame_logic	state.h	/^	virtual void frame_logic(double dt) = 0;$/;"	p	class:state	access:public	signature:(double dt)
state::key_down	state.h	/^	virtual void key_down(int k) {}$/;"	f	class:state	access:public	signature:(int k)
state::key_up	state.h	/^	virtual void key_up(int k) {}$/;"	f	class:state	access:public	signature:(int k)
state::next_state	state.h	/^	virtual unique_ptr<state> next_state() = 0;$/;"	p	class:state	access:public	signature:()
state::sigkill	state.h	/^	virtual void sigkill() = 0;$/;"	p	class:state	access:public	signature:()
state::~state	state.h	/^	virtual ~state() {}$/;"	f	class:state	access:public	signature:()
steering_vec	game_model.h	/^	double steering_vec[2];$/;"	m	struct:game_model	access:public
swap_buffers	allegro.cpp	/^void allegro::swap_buffers() {$/;"	f	class:allegro	signature:()
swap_buffers	allegro.h	/^	void swap_buffers();$/;"	p	class:allegro	access:public	signature:()
theta	components/component.h	/^		double theta;$/;"	m	struct:ent_msg::__anon7	access:public
tick	random_clock.h	/^	void tick(double dt) {$/;"	f	class:random_clock	access:public	signature:(double dt)
time	components/appearance/frame_def.h	/^	double time;$/;"	m	struct:frame_def	access:public
trigger_down	game_model.h	/^	, trigger_down(false)$/;"	p	struct:game_model	access:public	signature:(false)
trigger_down	game_model.h	/^	bool trigger_down;$/;"	m	struct:game_model	access:public
type	components/component.h	/^	ent_msg_t type;$/;"	m	struct:ent_msg	access:public
type	game_model.h	/^	game_msg_t type;$/;"	m	struct:game_msg	access:public
vx	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon12	access:public
vx	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon13	access:public
vx	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon15	access:public
vy	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon12	access:public
vy	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon13	access:public
vy	game_model.h	/^		double vx, vy;$/;"	m	struct:game_msg::__anon15	access:public
x	components/component.h	/^		double x;$/;"	m	struct:ent_msg::__anon7	access:public
x	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon12	access:public
x	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon13	access:public
x	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon14	access:public
x	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon15	access:public
x	geometry/types.h	/^	double x, y;$/;"	m	struct:point	access:public
y	components/component.h	/^		double y;$/;"	m	struct:ent_msg::__anon7	access:public
y	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon12	access:public
y	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon13	access:public
y	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon14	access:public
y	game_model.h	/^		double x, y;$/;"	m	struct:game_msg::__anon15	access:public
y	geometry/types.h	/^	double x, y;$/;"	m	struct:point	access:public
~allegro	allegro.cpp	/^allegro::~allegro() {$/;"	f	class:allegro	signature:()
~allegro	allegro.h	/^	~allegro();$/;"	p	class:allegro	access:public	signature:()
~component	components/component.h	/^	virtual ~component() {}$/;"	f	class:component	access:public	signature:()
~game_state	game_state.cpp	/^	~game_state() {$/;"	f	class:game_state	access:public	signature:()
~shape	collision/shape.h	/^	virtual ~shape() {}$/;"	f	class:shape	access:public	signature:()
~state	state.h	/^	virtual ~state() {}$/;"	f	class:state	access:public	signature:()
